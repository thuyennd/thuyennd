(function()
    game:GetService('CoreGui').RobloxPromptGui.promptOverlay.ChildAdded:Connect(CheckKick)
    Config = {
        Team = "Pirates",
        Configuration = {
            HopWhenIdle = false,
            AutoHop = false,
            AutoHopDelay = None,
            FpsBoost = false
        },
        Items = {

            -- Melees 
            AutoFullyMelees = true,

            -- Swords 
            Saber = true,
            CursedDualKatana = true,

            -- Guns 
            SoulGuitar = true,

            -- Upgrades 

            RaceV2 = true

        },
        Settings = {
            StayInSea2UntilHaveDarkFragments = false -- bat cai nay se hop tim darkbeard / turn this on to force hop for darkbeard ( for sg )
        }
    }
        
    local LogService = game:GetService('LogService')
    local GameName = "Blox Fruit" 

    pcall(function() 
        GameName = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name
    end) 

    local StartTime = os.time()

    local Traces = {}

    function mmb() 
        

    local Orders = {"Task1", "Task2", "Currencies", "Melees", "LiveTime", "DebugLine"} 
    local Interface = {
        Instances = {}
    } 

    local isVisible = true
    local isToggleOpen = false
    local player = game.Players.LocalPlayer

    repeat task.wait() until game.CoreGui

    local HopGui = Instance.new("ScreenGui")
    local NameHub = Instance.new("TextLabel")
    local UIStroke = Instance.new("UIStroke")
    local StrokeBounty = Instance.new("UIStroke")
    local Bounty = Instance.new("TextLabel")
    local ToggleButton = Instance.new("ImageButton")
    local ToggleContainer = Instance.new("Frame")
    local ToggleUIStroke = Instance.new("UIStroke")
    local ToggleIcon = Instance.new("TextLabel")

    -- Create a table to store UI references for blurring
    local UIReferences = {}

    HopGui.Name = "CyndralDev"
    HopGui.Parent = game:GetService("CoreGui")
    HopGui.Enabled = true
    HopGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    HopGui.IgnoreGuiInset = true 

    NameHub.Name = "NameHub"
    NameHub.Parent = HopGui
    NameHub.AnchorPoint = Vector2.new(0.5, 0.5)
    NameHub.Position = UDim2.new(0.5, 0, 0.3, 0)
    NameHub.Size = UDim2.new(1, 0, 0, 80)
    NameHub.BackgroundTransparency = 0.999
    NameHub.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    NameHub.BorderColor3 = Color3.fromRGB(0, 0, 0)
    NameHub.BorderSizePixel = 0
    NameHub.Font = Enum.Font.FredokaOne
    NameHub.Text = "cyndral.dev"

    local UIStroke = Instance.new("UIStroke")
    UIStroke.Parent = NameHub
    UIStroke.Color = Color3.fromRGB(0, 0, 0)
    UIStroke.Thickness = 1

    NameHub.TextColor3 = Color3.fromRGB(9, 255, 248)
    NameHub.TextSize = 50

    -- Create Toggle Button Container
    ToggleContainer.Name = "ToggleContainer"
    ToggleContainer.Parent = HopGui
    ToggleContainer.AnchorPoint = Vector2.new(1, 0)
    ToggleContainer.Position = UDim2.new(1, -20, 0, 20)
    ToggleContainer.Size = UDim2.new(0, 50, 0, 50)
    ToggleContainer.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    ToggleContainer.BackgroundTransparency = 0.2
    ToggleContainer.BorderColor3 = Color3.fromRGB(0, 0, 0)
    ToggleContainer.BorderSizePixel = 0
    ToggleContainer.ClipsDescendants = true
    -- Make it circular
    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(1, 0)
    UICorner.Parent = ToggleContainer

    -- Add stroke to toggle container
    ToggleUIStroke.Parent = ToggleContainer
    ToggleUIStroke.Color = Color3.fromRGB(9, 255, 248)
    ToggleUIStroke.Thickness = 2

    -- Create Toggle Button
    ToggleButton.Name = "ToggleButton"
    ToggleButton.Parent = ToggleContainer
    ToggleButton.AnchorPoint = Vector2.new(0.5, 0.5)
    ToggleButton.Position = UDim2.new(0.5, 0, 0.5, 0)
    ToggleButton.Size = UDim2.new(1, 0, 1, 0)
    ToggleButton.BackgroundTransparency = 1
    ToggleButton.BorderSizePixel = 0

    -- Add toggle icon
    ToggleIcon.Name = "ToggleIcon"
    ToggleIcon.Parent = ToggleContainer
    ToggleIcon.AnchorPoint = Vector2.new(0.5, 0.5)
    ToggleIcon.Position = UDim2.new(0.5, 0, 0.5, 0)
    ToggleIcon.Size = UDim2.new(0.7, 0, 0.7, 0)
    ToggleIcon.BackgroundTransparency = 1
    ToggleIcon.BorderSizePixel = 0
    ToggleIcon.Font = Enum.Font.GothamBold
    ToggleIcon.Text = "👁️"
    ToggleIcon.TextColor3 = Color3.fromRGB(255, 255, 255)
    ToggleIcon.TextSize = 24
    ToggleIcon.TextScaled = true

    local function createTextLabel(text, position, isImage)
        local StrokeBounty = Instance.new("UIStroke")
        local Bounty = Instance.new("TextLabel")
        Bounty.Name = "hmph ><"
        Bounty.Parent = HopGui
        Bounty.AnchorPoint = Vector2.new(0.5, 0.5)
        Bounty.Position = position
        Bounty.Size = UDim2.new(0, 200, 0, 30)
        Bounty.BackgroundTransparency = 0.999
        Bounty.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        Bounty.BorderColor3 = Color3.fromRGB(0, 0, 0)
        Bounty.BorderSizePixel = 0
        Bounty.Font = Enum.Font.FredokaOne
        Bounty.Text = text
        Bounty.TextColor3 = Color3.fromRGB(255, 255, 255)
        Bounty.TextSize = 13
        Bounty.RichText = true
        StrokeBounty.Parent = Bounty
        StrokeBounty.Color = Color3.fromRGB(0, 0, 0)
        StrokeBounty.Thickness = 1

        return Bounty
    end

    MainTextLabel = createTextLabel(" ", UDim2.new(0.5, 0, 0.4, 0))

    Interface.Instances.MainTextLabel = MainTextLabel

    for Index, OrderName in pairs(Orders) do 
        Interface.Instances[OrderName] = createTextLabel("...", UDim2.new(0.5, 0, 0.45 + (.05 * Index) , 0)) 
    end 

    -- Custom blur effect that can blur other UIs
    local BlurManager = {}

    function BlurManager:Create()
        -- Create a new transparent frame that covers the screen
        local blurFrame = Instance.new("Frame")
        blurFrame.Name = "BlurFrame"
        blurFrame.Parent = HopGui
        blurFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
        blurFrame.BackgroundTransparency = 1 -- Start fully transparent
        blurFrame.BorderSizePixel = 0
        blurFrame.Size = UDim2.new(1, 0, 1, 0)
        blurFrame.Position = UDim2.new(0, 0, 0, 0)
        blurFrame.ZIndex = 0 -- Behind everything
        
        -- Store the reference
        self.blurFrame = blurFrame
        self.blurIntensity = 0
        
        return self
    end

    function BlurManager:SetIntensity(intensity)
        -- Clamp intensity between 0 and 0.95 (0.95 is nearly opaque)
        intensity = math.clamp(intensity, 0, 0.95)
        self.blurIntensity = intensity
        
        -- Apply the intensity to our blur frame
        local tweenService = game:GetService("TweenService")
        local tweenInfo = TweenInfo.new(
            0.3,                    -- Time
            Enum.EasingStyle.Cubic, -- Easing style
            Enum.EasingDirection.Out -- Easing direction
        )
        
        local tween = tweenService:Create(self.blurFrame, tweenInfo, {
            BackgroundTransparency = 1 - intensity
        })
        
        tween:Play()
        
        -- Also apply the actual blur effect in lighting
        if not self.blurEffect then
            self.blurEffect = Instance.new("BlurEffect")
            self.blurEffect.Name = "CustomBlur"
            self.blurEffect.Parent = game.Lighting
            self.blurEffect.Enabled = true
        end
        
        local blurSizeTween = tweenService:Create(self.blurEffect, tweenInfo, {
            Size = intensity * 30 -- Max blur size is 30
        })
        
        blurSizeTween:Play()
        
        -- Apply blur to registered UI elements
        for _, uiElement in pairs(UIReferences) do
            if uiElement and uiElement.Parent then
                local uiTween = tweenService:Create(uiElement, tweenInfo, {
                    BackgroundTransparency = uiElement._originalTransparency + (intensity * 0.5)
                })
                uiTween:Play()
            end
        end
    end

    function BlurManager:RegisterUI(uiElement)
        if uiElement and uiElement:IsA("GuiObject") then
            -- Store the original transparency
            uiElement._originalTransparency = uiElement.BackgroundTransparency
            table.insert(UIReferences, uiElement)
        end
    end

    -- Create our blur manager
    local blurEffect = BlurManager:Create()

    -- Improved Text Transition Animation
    function SetText(Name, Text) 
        task.spawn(function() 
            local TextIns = Interface.Instances[Name] 
            if not TextIns then return end
            
            if not isVisible then 
                TextIns.Text = Text 
                return 
            end 
            
            if TextIns.Text == Text then return end
            
            -- Fade out with smoother animation
            local tweenService = game:GetService("TweenService")
            local fadeOutInfo = TweenInfo.new(
                0.3,                 -- Time
                Enum.EasingStyle.Quad,  -- Easing style
                Enum.EasingDirection.Out -- Easing direction
            )
            
            local fadeOut = tweenService:Create(TextIns, fadeOutInfo, {
                TextTransparency = 1,
                TextStrokeTransparency = 1
            })
            
            fadeOut:Play()
            fadeOut.Completed:Wait()
            
            -- Change text while invisible
            TextIns.Text = Text
            
            -- Fade in with smoother animation
            local fadeInInfo = TweenInfo.new(
                0.3,                 -- Time
                Enum.EasingStyle.Quad,  -- Easing style
                Enum.EasingDirection.Out -- Easing direction
            )
            
            local fadeIn = tweenService:Create(TextIns, fadeInInfo, {
                TextTransparency = 0,
                TextStrokeTransparency = 0
            })
            
            fadeIn:Play()
        end)
    end

    local OldExposureCompensation = game:GetService("Lighting").ExposureCompensation
    -- Enhanced toggle function with improved animations
    function ToggleUI(State)
        isToggleOpen = State or not isToggleOpen
        
        
    -- game:GetService("Lighting").ExposureCompensation = State and -math.huge or OldExposureCompensation
        
        local contentLabels = {NameHub, MainTextLabel}
        for _, instance in pairs(Interface.Instances) do
            table.insert(contentLabels, instance)
        end
        
        local tweenService = game:GetService("TweenService")
        local tweenInfo = TweenInfo.new(
            0.5,                    -- Time
            Enum.EasingStyle.Quart, -- Easing style
            Enum.EasingDirection.InOut -- Easing direction
        )
        
        if isToggleOpen then
            -- Show UI
            ToggleIcon.Text = "👁️"
            
            -- Fancy rotation animation for toggle button
            local rotationTween = tweenService:Create(ToggleIcon, 
                TweenInfo.new(0.5, Enum.EasingStyle.Back, Enum.EasingDirection.Out), 
                {Rotation = 360}
            )
            rotationTween:Play()
            rotationTween.Completed:Connect(function()
                ToggleIcon.Rotation = 0
            end)
            
            -- Animate all elements in
            for _, label in pairs(contentLabels) do
                label.TextTransparency = 1
                
                local tween = tweenService:Create(label, tweenInfo, {
                    TextTransparency = 0
                })
                
                if label:FindFirstChildOfClass("UIStroke") then
                    label:FindFirstChildOfClass("UIStroke").Transparency = 1
                    
                    local strokeTween = tweenService:Create(label:FindFirstChildOfClass("UIStroke"), tweenInfo, {
                        Transparency = 0
                    })
                    
                    strokeTween:Play()
                end
                
                tween:Play()
            end
            
            -- Apply blur effect
            blurEffect:SetIntensity(0.4) -- 40% blur intensity
            
        else
            -- Hide UI
            ToggleIcon.Text = "🔍"
            
            -- Fancy shrink animation for toggle button
            local shrinkTween = tweenService:Create(ToggleIcon, 
                TweenInfo.new(0.3, Enum.EasingStyle.Back, Enum.EasingDirection.In), 
                {Size = UDim2.new(0.3, 0, 0.3, 0)}
            )
            shrinkTween:Play()
            shrinkTween.Completed:Connect(function()
                local growTween = tweenService:Create(ToggleIcon, 
                    TweenInfo.new(0.3, Enum.EasingStyle.Back, Enum.EasingDirection.Out), 
                    {Size = UDim2.new(0.7, 0, 0.7, 0)}
                )
                growTween:Play()
            end)
            
            -- Animate all elements out
            for _, label in pairs(contentLabels) do
                local tween = tweenService:Create(label, tweenInfo, {
                    TextTransparency = 1
                })
                
                if label:FindFirstChildOfClass("UIStroke") then
                    local strokeTween = tweenService:Create(label:FindFirstChildOfClass("UIStroke"), tweenInfo, {
                        Transparency = 1
                    })
                    
                    strokeTween:Play()
                end
                
                tween:Play()
            end
            
            -- Remove blur effect
            blurEffect:SetIntensity(0) -- 0% blur intensity
        end
        
        isVisible = isToggleOpen
    end

    -- Function to register an external UI for blurring
    function Interface.RegisterForBlur(uiElement)
        blurEffect:RegisterUI(uiElement)
    end

    -- Configure toggle button click event
    ToggleButton.MouseButton1Click:Connect(function()
        ToggleUI()
    end)

    -- Add pulse animation to toggle button on hover
    ToggleButton.MouseEnter:Connect(function()
        local tweenService = game:GetService("TweenService")
        
        -- Pulse animation
        local pulseSequence = function()
            local expandTween = tweenService:Create(ToggleContainer, 
                TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), 
                {Size = UDim2.new(0, 55, 0, 55)}
            )
            
            local glowTween = tweenService:Create(ToggleUIStroke, 
                TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), 
                {Color = Color3.fromRGB(0, 255, 255), Thickness = 3}
            )
            
            expandTween:Play()
            glowTween:Play()
        end
        
        pulseSequence()
    end)

    ToggleButton.MouseLeave:Connect(function()
        local tweenService = game:GetService("TweenService")
        local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
        
        local shrinkTween = tweenService:Create(ToggleContainer, tweenInfo, {
            Size = UDim2.new(0, 50, 0, 50)
        })
        
        local strokeTween = tweenService:Create(ToggleUIStroke, tweenInfo, {
            Color = Color3.fromRGB(9, 255, 248),
            Thickness = 2
        })
        
        shrinkTween:Play()
        strokeTween:Play()
    end)

    -- Original toggle interface function (for backward compatibility)
    function Interface.ToggleInterface(State) 
        isToggleOpen = State
        
        local tweenService = game:GetService("TweenService")
        local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
        
        if State then
            HopGui.Enabled = true 
            ToggleIcon.Text = "👁️"
            blurEffect:SetIntensity(0.4) -- 40% blur intensity
        else
            ToggleIcon.Text = "🔍"
            blurEffect:SetIntensity(0) -- 0% blur intensity
        end
        
        isVisible = State
    end

    -- Add a floating animation to the toggle button
    local function setupFloatingAnimation()
        
    end

    setupFloatingAnimation()

    ToggleUI(true)
    -- Export the SetText function and other functions
    Interface.SetText = SetText
    Interface.ToggleUI = ToggleUI
    Interface.BlurManager = blurEffect

        if not isfile("fluent.lua") then
            writefile("fluent.lua", game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))
        end
        
        local Fluent = loadstring(readfile("fluent.lua"))()
        local Animation = Instance.new('Animation')
        Animation.AnimationId = 'http://www.roblox.com/asset/?id=1elutruahuabuahd'
        
        getgenv().alert = function(t1, t2)
            pcall(function()
                Fluent:Notify({
                    Title = t1 or "",
                    Content = t2 or "",
                    Duration = 5
                })
            end)
        end
        alert("Cyndral", "Endpoint reached")
        
        local CDN_HOST = "https://files.lumitone.xyz/"
        

        
        
        
        
        StartTime = os.time()
        
        OldSessionTime = isfile(".tdif-" .. game.Players.LocalPlayer.Name) and
                            tonumber(readfile(".tdif-" .. game.Players.LocalPlayer.Name)) or 0
        
        repeat
            task.wait()
            game.ReplicatedStorage.Remotes.CommF_:InvokeServer("SetTeam", Config.Team)
        
        until game.Players.LocalPlayer.Character
        alert("team assembed")
        repeat wait() until game.Players.LocalPlayer.Character
        spawn(function()
            game:GetService("Players").LocalPlayer.PlayerScripts:WaitForChild('NewIslandLOD', 9999):Destroy() 
            game:GetService("Players")LocalPlayer.PlayerScripts:WaitForChild('IslandLOD', 9999):Destroy() 
        end)
        alert("wait 1", "ok")

 
        local Segmants = {"RawConstants", "Utilly", "QuestManager", "SpawnRegionLoader", "TweenController", "AttackController",
                        "CombatController", "FunctionsHandler", "Hooks", "Debug", "Hop", "Storage"}
        
        -- Interface.ToggleDarkScreen(Config.Utilly.BlackScreen) 
        
        StartTick = tick()
        repeat
            task.wait()
        until SetText
        alert("load 2")
        SetText("MainTextLabel", "Initalizing Script...")
        -- loadstring(game:HttpGet"https://github.com/Cyndral-World/Cyndral_BF/blob/main/InstanceDownloader.lua?raw=true")()
        
        local FolderPath = "Rua_Hub/Blox_Fruit/Assets/"
        
        
        ScriptStorage = {
            IsInitalized = false,
            PlayerData = {},
            Melees = {},
            CurrentMeleeData = {},
            Enemies = {},
            Tools = {},
            Backpack = {},
            IgnoreStoreFruits = {},
            Connections = {
                LocalPlayer = {}
            },
            Task = {},
            Tracebacks = {},
            TaskController = {},
            TracebackUpdater = {},
            Interface = Interface,
            NPCs = {}
        }
        
        Players = game.Players
        LocalPlayer = Players.LocalPlayer
        Character = LocalPlayer.Character
        
        Humanoid = Character:WaitForChild("Humanoid")
        HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
        
        PlayerGui = LocalPlayer:WaitForChild("PlayerGui", 10)
        Lighting = game:GetService("Lighting")
        
        Services = {}
        
        setmetatable(Services, {
            __index = function(_, Index)
                return game:GetService(Index)
            end
        });
        
        setmetatable(ScriptStorage.Enemies, {
            __index = function(_, Index)
                return Services.Workspace.Enemies:FindFirstChild(Index) or Services.ReplicatedStorage:FindFirstChild(Index)
            end
        })
        
        setmetatable(ScriptStorage.Tools, {
            __index = function(Self, Index)
                return LocalPlayer.Character:FindFirstChild(Index) or LocalPlayer.Backpack:FindFirstChild(Index)
            end
        })
        
        setmetatable(ScriptStorage.NPCs, {
            __index = function(_, Index)
                return workspace.NPCs:FindFirstChild(Index) or game.ReplicatedStorage.NPCs:FindFirstChild(Index)
            end
        })
        
        function CreateTraceback(Index, Value) -- i gave up 
        
            table.insert(ScriptStorage.Tracebacks,
                (GetCurrentDateTime() .. " ( " .. DispTime(os.time() - StartTime, true) .. " ) after execution | " .. Index ..
                    " | " .. Value))
        end
        
        function SetTask(Index, Value)
        
            if ScriptStorage.Task[Index] == Value then
                return
            end
            local Parser = {
                MainTask = "Task1",
                SubTask = "Task2"
            }
            if Parser[Index] then
                if SetText then
                    SetText(Parser[Index], Index .. " : " .. Value)
                end
        
            end
            ScriptStorage.Task[Index] = Value
            ScriptStorage.Task[Index .. "-d"] = os.time()
        
        end
        
        Remotes = {}
        print(1)
        setmetatable(Remotes, {
            __index = function(Self, Key)
        
                if Key ~= "CommF_" then
                    print("captured unregistered signal", key)
                    return Services.ReplicatedStorage.Remotes[Key]
                end
        
                local tbl = {
                    InvokeServer = function(Self, ...)
                        print("remote fired", ...)
                        return Services.ReplicatedStorage.Remotes.CommF_:InvokeServer(...)
                    end
                }
        
                return tbl
            end
        })
        
        Tasks = {}
        
        function AwaitUntilPlayerLoaded(Player, Timeout)
            repeat
                task.wait()
            until Player.Character
        
            Player.Character:WaitForChild("Humanoid")
        
            repeat
                task.wait()
            until Player.Character.Humanoid.Health > 0
        end
        
        function AddPoint()
            local PointsValue = {}
            local Result
        
            for _, CInst in LocalPlayer.Data.Stats:GetChildren() do
                if CInst and CInst:FindFirstChild("Level") then
                    PointsValue[CInst.Name] = CInst.Level.Value
                end
            end
            if PointsValue.Defense < MaxLevel and
                (PointsValue.Defense < (ScriptStorage.PlayerData.Level / 80) or MaxLevel - PointsValue.Melee < 100) then
                Result = "Defense"
            elseif PointsValue.Melee < MaxLevel then
                Result = "Melee"
            else
                Result = "Sword"
            end
        
            Remotes.CommF_:InvokeServer("AddPoint", Result, 999)
        end
        
        local Colors = {
            Currencies = {
                Level = "#00FF40",
                Beli = "#FF7800",
                Fragments = "#6600FF"
            },
            Races = {}
        }
        function RefreshPlayerData()
            for _, ChildInstance in LocalPlayer.Data:GetChildren() do
                pcall(function()
                    ScriptStorage.PlayerData[ChildInstance.Name] = ChildInstance.Value
                end)
            end
        
            local Currencies = ""
            for Index, Value in ScriptStorage.PlayerData do
                local Color = Colors.Currencies[Index]
                if Color then
                    Currencies = Currencies .. '<font color="' .. Color .. '">' .. Index .. '</font>: ' .. Value .. ' '
                end
            end
        
            if ScriptStorage.Interface then
                SetText("Currencies", Currencies)
            end
        
        end
        
        function RefreshRace()
            local v27, v28 = Remotes.CommF_:InvokeServer("Alchemist", "1"), Remotes.CommF_:InvokeServer("Wenlocktoad", "1")
            ScriptStorage.PlayerData.RaceLevel = 1
            if LocalPlayer.Character:FindFirstChild("RaceTransformed") then
                ScriptStorage.PlayerData.RaceLevel = 4
            elseif v28 == -2 then
                ScriptStorage.PlayerData.RaceLevel = 3
            elseif v27 == -2 then
                ScriptStorage.PlayerData.RaceLevel = 2
            end
        end
        
        function RefreshInventory()
            ScriptStorage.Backpack2 = {}
            for _, Value in Remotes.CommF_:InvokeServer("getInventory") do
                ScriptStorage.Backpack2[Value.Name] = Value
            end
        
            ScriptStorage.Backpack = ScriptStorage.Backpack2
        end
        
        function ResearchMoves(Child)
            if Child and tostring(Child) == "V" then
                if ScriptStorage.Connections.BurstCheck then
        
                    ScriptStorage.Connections.BurstCheck:Disconnect()
                    task.wait(1)
                end
                print("[ Debug ] Registering burst", Child)
                ScriptStorage.Connections.BurstCheck = Child.Cooldown:GetPropertyChangedSignal("AbsoluteSize"):Connect(
                    function()
                        if EnablingBurstDebounce and os.time() - EnablingBurstDebounce < 10 then
                            return
                        end
                        local Value = Child.Cooldown.AbsoluteSize.X
                        if Value < 3 then
                            EnablingBurstDebounce = os.time()
        
                            task.wait(5)
                            SendKey("V", 0)
                        end
                    end)
            end
        end
        
        function CheckMeleeBurstMove(Child)
            if Child.Name == "Black Leg" or Child.Name == "Death Step" then
                local UI = PlayerGui.Main.Skills:WaitForChild(Child.Name, 9)
        
                ResearchMoves(UI:WaitForChild("V"))
        
            end
        end
        
        function RefreshMelees(ReturnOrSet)
            local Result = ""
        
            for MeleeName, Level in ScriptStorage.Melees do
                Result = Result .. MeleeName .. ": " .. Level .. " "
            end
            Result = Result == "" and "[0]" or Result
            if ReturnOrSet then
                return Result
            end
        
            if ScriptStorage.Interface then
                SetText("Melees", Result)
            end
        end
        function MeleeCheck(Child)
            print("Melee check", Child)
        
            if Child and typeof(Child) == "Instance" and Child:IsA("Tool") then
                if Child.ToolTip == "Melee" then
        
                    -- task.spawn(function() 
                    --   CheckMeleeBurstMove(Child)
                    -- end) 
        
                    if ScriptStorage.Connections.Melees then
        
                        ScriptStorage.Connections.Melees:Disconnect()
                    end
        
                    ScriptStorage.CurrentMeleeData.Name = Child.Name
                    pcall(function()
                        ScriptStorage.Connections.Melees:Destroy()
                    end)
        
                    ScriptStorage.Connections.Melees = Child.Level.Changed:Connect(function(Value)
        
                        ScriptStorage.Melees[Child.Name] = Value
                        RefreshMelees()
                    end)
                    ScriptStorage.Melees[Child.Name] = Child.Level.Value
                    RefreshMelees()
        
                elseif string.find(tostring(Child), "Fruit") then
                    task.spawn(function()
        
                        if table.find(ScriptStorage.IgnoreStoreFruits, Child:GetAttribute("OriginalName")) then
                            return
                        end
                        local StoreResult = Remotes.CommF_:InvokeServer("StoreFruit", Child:GetAttribute("OriginalName"), Child)
        
                    end)
                end
            end
        end
        print(0)
        SetText("MainTextLabel", "Refreshing Player Data 18219")
        print(-1)
        MeleeCheck(LocalPlayer.Character:FindFirstChildOfClass("Tool"))
        print(-2)
        RefreshPlayerData()
        print(-3)
        function RegisterLocalPlayerEventsConnection()
        
            task.spawn(function()
                task.wait(6)
                if LocalPlayer.Character:FindFirstChild("HasBuso") then
                    return
                end
                Remotes.CommF_:InvokeServer("Buso")
            end)
        
            for _, Connection in ScriptStorage.Connections.LocalPlayer do
                pcall(function()
                    Connection:Disconnect()
                end)
            end
        
            AwaitUntilPlayerLoaded(LocalPlayer)
        
            LocalPlayer:SetAttribute("IsAvailable", true)
        
            ScriptStorage.Connections.LocalPlayer["HealthCheck"] = LocalPlayer.Character:WaitForChild("Humanoid")
                :GetPropertyChangedSignal("Health"):Connect(function()
        
                    local Health = LocalPlayer.Character.Humanoid.Health
        
                    LocalPlayer:SetAttribute("IsAvailable", Health > 10)
                    ScriptStorage.LocalPlayerHealth = Health
                end)
        
            ScriptStorage.Connections.LocalPlayer["Melee"] = LocalPlayer.Character.ChildAdded:Connect(MeleeCheck)
            ScriptStorage.Connections.LocalPlayer["Fruit"] = LocalPlayer.Backpack.ChildAdded:Connect(MeleeCheck)
        
            table.foreach(LocalPlayer.Backpack:GetChildren(), function(_, Melee)
                MeleeCheck(Melee)
            end)
        
            LastIdleCheck = os.time()
            ScriptStorage.Connections.LocalPlayer.PositionChecker =
                LocalPlayer.Character.HumanoidRootPart:GetPropertyChangedSignal("CFrame"):Connect(function()
                    if os.time() == LastIdleCheck then return end 
                    LastIdleCheck = os.time()
                    if oldPos then 
                        if (LocalPlayer.Character.HumanoidRootPart.CFrame.p - oldPos).magnitude < 2 then 
                            return end 
                    end 
                    oldPos = (LocalPlayer.Character.HumanoidRootPart.CFrame.p) 
                    LastIdling = os.time()
                    
                end)
        
            local PointsInstance = LocalPlayer.Data:WaitForChild("Points")
            ScriptStorage.Connections.LocalPlayer.PointConnection = PointsInstance:GetPropertyChangedSignal("Value"):Connect(
                function()
        
                    local CurrentValue = LocalPlayer.Data:WaitForChild("Points")
                    if OldPointValue == CurrentValue then
                        return
                    end
        
                    OldPointValue = CurrentValue
        
                    AddPoint()
                end)
        end
        RegisterLocalPlayerEventsConnection(LocalPlayer)
        
        print(-4)     
        game.Players.LocalPlayer.CharacterAdded:Connect(function(Character)
        
            print('[ Debug ] re-registering events')
            RegisterLocalPlayerEventsConnection(LocalPlayer)
        
        end)
        
        task.spawn(function()
            task.wait(3)
            if LocalPlayer.Character:FindFirstChild("HasBuso") then
                return
            end
            Remotes.CommF_:InvokeServer("Buso")
        end)
        
    print(1)
    MeleesTable = {
        "Black Leg",
        "Electro",
        "Fishman Karate",
        "Dragon Claw",
        "Superhuman",
        "Death Step",
        "Electric Claw",
        "Sharkman Karate",
        "Dragon Talon",
        "Godhuman",
        "SanguineArt"
    }

    MeleesId =  {
        "BlackLeg",
        "Electro",
        "FishmanKarate",
        "DragonClaw",
        "Superhuman",
        "DeathStep",
        "ElectricClaw",
        "SharkmanKarate",
        "DragonTalon",
        "Godhuman",
        "SanguineArt"
    } 


    MeleePrices = {
        ["Black Leg"] = {
            Price =
            {
                Beli = 150000,
            }, 
            Id = 'BlackLeg', 
            NextLevelRequirement = 400, 
            Requirements = function() 
                return true 
            end,
            Buy = function(Check) 
                return BuyMelee("BlackLeg", Check)
            end 
        }, 
        ["Electro"] = {
            Price = 
            {
                Beli = 500000
            },
            Id = 'Electro', 
            NextLevelRequirement = 400, 
            Requirements = function() 
                return true 
            end, 
            Buy = function(Check) 
                return BuyMelee("Electro", Check)
            end 
        }, 
        ["Fishman Karate"] = {
            Price = { 
                Beli = 750000 
            }, 
            NextLevelRequirement = 400, 
            Requirements = function() 
                return true 
            end, 
            Buy = function(Check) 
                return BuyMelee("FishmanKarate", Check)
            end 
        }, 
        ["Dragon Claw"] = {
            Price = { 
                Fragments = 1500 
            }, 
            NextLevelRequirement = 400, 
            Requirements = function() 
                return true 
            end, 
            Buy = function(Check) 
                if Check then 
                    return game.ReplicatedStorage.Remotes.CommF_:InvokeServer("BlackbeardReward", "DragonClaw", "1") == 1 
                end 
                return Remotes.CommF_:InvokeServer("BlackbeardReward", "DragonClaw", "2")
            end 
        }, 
        ["Superhuman"] = 
        {
            Price = 
            {
                Beli = 3000000
            }, 
            NextLevelRequirement = 400, 
            Requirements = function() 
                return true 
            end,
            Buy = function(Check) 
                return BuyMelee("Superhuman", Check)
            end 
        },
        ["Death Step"] = 
        {
            Price = 
            {
                Beli = 2500000, 
                Fragments = 5000
            }, 
            NextLevelRequirement = 400, 
            Requirements = function() 
                return true
            end, 
            Buy = function(Check) 
                return BuyMelee("DeathStep", Check)
            end 
        },
        ["Electric Claw"] = 
        {
            Price = 
            {
                Beli = 2500000, 
                Fragments = 5000
            }, 
            NextLevelRequirement = 400, 
            Requirements = function() 
                return true
            end, 
            Buy = function(Check) 
                return BuyMelee("ElectricClaw", Check)
            end 
        },
        ["Sharkman Karate"] = 
        {
            Price = 
            {
                Beli = 2500000, 
                Fragments = 5000
            }, 
            NextLevelRequirement = 400, 
            Requirements = function() 
                return true
            end, 
            Buy = function(Check) 
                return BuyMelee("SharkmanKarate", Check)
            end 
        }, 
        ["Dragon Talon"] = 
        {
            Price = 
            {
                Beli = 2500000, 
                Fragments = 5000
            }, 
            NextLevelRequirement = 400, 
            Requirements = function() 
                return true
            end, 
            Buy = function(Check) 
                return BuyMelee("DragonTalon", Check)
            end 
        }, 

        ["Godhuman"] = 
        {
            Price = 
            {
                Beli = 5000000, 
                Fragments = 5000
            }, 
            NextLevelRequirement = 350, 
            Requirements = function() 
                return true
            end, 
            Buy = function(Check) 
                return BuyMelee("Godhuman", Check)
            end 
        }
    }



    DropItemData = {
        ["Buddy Sword"] = {
            Sea = 3, 
            Level = 1500, 
            Boss = "Cake Queen"
        }, 
        ["Canvander"] = {
            Sea = 3, 
            Level = 1500, 
            Boss = "Beautiful Pirate"
        }, 
        ["Twin Hooks"] = {
            Sea = 3, 
            Level = 1500, 
            Boss = "Captain Elephant"
        }, 
        ["Venom Bow"] = {
            Sea = 3, 
            Level = 1500, 
            Boss = "Hydra Leader"
        }
    }
            
    GodhumanMaterials = {
        ["Fish Tail"] = {
            20,
            3,
            {
                "Fishman Raider",
                "Fishman Captain"
            }, 
            {
                "DeepForestIsland3", 
                1, 
                1775, 
                "Turtle Adventure Quest Giver"
            }
        },
        ["Dragon Scale"] = {
            10,
            3,
            {
                "Dragon Crew Warrior",
                "Dragon Crew Archer"
            }, 
            {
                "DragonCrewQuest", 
                1, 
                1575,
                "Dragon Crew Quest Giver"
            }
        },
        ["Magma Ore"] = {
            20,
            2,
            {
                "Magma Ninja"
            }, 
            {
                "FireSideQuest", 
                1, 
                1100, 
                "Fire Quest Giver"
            }
        },
        ["Mystic Droplet"] = {
            10,
            2,
            {
                "Sea Soldier",
                "Water Fighter"
            }, 
            {
                "ForgottenQuest", 
                2, 
                1425, 
                "Forgotten Quest Giver"
            }
        }
    }

    SeaIndexes = {"Main", "Dressrosa", "Zou"}

    TasksOrder = 
    {
        "Tushita", 
        "CursedDualKatana",
        "SoulGuitar",
        "SpecialBossesTask",
        "RaidController",
        "Trevor",
        "UtillyItemsActivitation",
        "ColosseumPuzzle", 
        "EvoRace",
        "Wenlocktoad",
        "ThirdSeaPuzzle",
        "Yama",
        "Saber", 
        "PirateRaid", 
        "SecondSeaPuzzle",
        "ThirdSeaPuzzle",
        "CollectDrops",
        "BossesTask", 
        "ExpRedeem",
        "LevelFarm"
    }

    MaxLevel = 2700

    placeId = game.PlaceId
    if placeId == 2753915549 then
        Sea = "Main"
        SeaIndex = 1
    elseif placeId == 4442272183 then
        Sea = "Dressrosa"
        SeaIndex = 2    
    elseif placeId == 7449423635 then
        Sea = "Zou"
        SeaIndex = 3
    end


    Portals = ({
        {
            Vector3.new(-7894.6201171875, 5545.49169921875, -380.246346191406),
            Vector3.new(-4607.82275390625, 872.5422973632812, -1667.556884765625),
            Vector3.new(61163.8515625, 11.759522438049316, 1819.7841796875),
            Vector3.new(3876.280517578125, 35.10614013671875, -1939.3201904296875)
        },
        {
            Vector3.new(-288.46246337890625, 306.130615234375, 597.9988403320312),
            Vector3.new(2284.912109375, 15.152046203613281, 905.48291015625),
            Vector3.new(923.21252441406, 126.9760055542, 32852.83203125),
            Vector3.new(-6508.5581054688, 89.034996032715, -132.83953857422)
        },
        {
            
        }
    })[SeaIndex]

    BossesOrder = {
        "Awakened Ice Admiral",
        "Tide Keeper",
        "Deandre",
        "Urban",
        "Diablo",
        "Soul Reaper",
        "Cake Prince"
    }
    BossesOrderLevel = {
        ["Awakened Ice Admiral"] = 700, 
        ["Tide Keeper"] = 700, 
        ["Deandre"] = 1500,
        ["Urban"] = 1500,
        ["Diablo"] = 1500,
        ["Cake Prince"] = 1500, 
        ["Soul Reaper"] = 1500
    }

    BossesOrderWL = {
        ["Deandre"] = 1500,
        ["Urban"] = 1500,
        ["Diablo"] = 1500,
        ["Cake Prince"] = 1500, 
        ["Don Swan"] = 1100,
        ["Awakened Ice Admiral"] = 700, 
        ["Tide Keeper"] = 700, 
    }


    SpecialBossesOrder = {
        ["Core"] = 700, 
        ["Darkbeard"] = 700, 
        ["rip_indra True Form"] = 1500, 
        ["Dough King"] = 1500, 
    }

    BlankTablets = {
        "Segment6",
        "Segment2",
        "Segment8",
        "Segment9",
        "Segment5"
    }

    Trophy = {
        ["Segment1"] = "Trophy1",
        ["Segment3"] = "Trophy2",
        ["Segment4"] = "Trophy3",
        ["Segment7"] = "Trophy4",
        ["Segment10"] = "Trophy5"
    }

    Pipes = {
        ["Part1"] = "Really black",
        ["Part2"] = "Really black",
        ["Part3"] = "Dusty Rose",
        ["Part4"] = "Storm blue",
        ["Part5"] = "Really black",
        ["Part6"] = "Parsley green",
        ["Part7"] = "Really black",
        ["Part8"] = "Dusty Rose",
        ["Part9"] = "Really black",
        ["Part10"] = "Storm blue"
    }



    function GenerateUUID()
        local Template ='xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'
        return string.gsub(Template, '[xy]', function (Idc)
            local V = (Idx == 'x') and math.random(0, 0xf) or math.random(8, 0xb)
            return string.format('%x', V)
        end)
    end

    function CheckIsPlayerAlive(Instance) 
        Instance = Instance or LocalPlayer 
        
        return Instance and Instance.Character and Instance.Character.Humanoid and Instance.Character.HumanoidRootPart and Instance.Character.Head and Instance.Character.Humanoid.Health > 0  -- nuh uh
    end 

    function ConvertTo(Type, Instance)
        return Type.new(Instance.X, Instance.Y, Instance.Z) 
    end 

    function CaculateDistance(Origin, Desnitation) 
        
        if not Origin then return 0 end 
        
        Desnitation = Desnitation or game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
        local Origin, Desnitation = ConvertTo(Vector3, Origin), ConvertTo(Vector3, Desnitation)
        
        return ( Origin - Desnitation ) .magnitude
    end  

    function DispTime(time, cc)
        time = tonumber(time)
        if not time then
            return "[err]"
        end
        local days = math.floor(time / 86400)
        local hours = math.floor(math.fmod(time, 86400) / 3600)
        local minutes = math.floor(math.fmod(time, 3600) / 60)
        local seconds = math.floor(math.fmod(time, 60))
        if cc then
            return (days .. "day, " .. hours .. "hrs, " .. minutes .. "min, " .. seconds .. "sec.")
        end
        return (days .. "day, " .. hours .. "hrs.")
    end

    function GetCurrentDateTime()
    local now = os.date("*t")  -- Get the current time as a table

    local hour = now.hour
    local minute = now.min
    local day = now.day
    local month = now.month
    local year = now.year
    local weekday = now.wday -- Day of the week (1 = Sunday, 7 = Saturday)

    local formattedTime = string.format("%02d:%02d ", hour, minute) -- Format time HH:MM

    local weekdays = {"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}
    local formattedWeekday = weekdays[weekday]

    local months = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"}
    local formattedMonth = months[month]

    local formattedDate = string.format("%s, %s %d %d", formattedWeekday, formattedMonth, day, year)

    return formattedTime.. formattedDate -- Combine time and date
    end

    function RandomArguments(...) 
        local Table = {...} 
        return Table[math.random(0, #Table)]
    end 

        
    function RoundVector3Down(vec)
        return Vector3.new(
            math.floor(vec.X / 10) * 10,
            math.floor(vec.Y / 10) * 10,
            math.floor(vec.Z / 10) * 10
        )
    end

    local Angle = 30
    lastChange = tick() 
    CaculateCircreDirection = function(Position)
        if Angle > 50000 then 
            Angle = 60
        end 
        
        Angle = Angle + ((tick() - lastChange) > .4 and 80 or 0) 

        
        if tick() - lastChange > .4 then 
            lastChange = tick()
        end
        
        local sum = Position + Vector3.new(math.cos(math.rad(Angle)) * 40, 0, math.sin(math.rad(Angle)) * 40)
        return CFrame.new(RoundVector3Down(sum.p))
    end

    function GetMonAsSortedRange() 
        local Result = {}
        
        table.foreach(Services.Workspace.Enemies:GetChildren(), function(_, Mon) 
            if Mon and Mon:FindFirstChild("Humanoid") and Mon:FindFirstChild("HumanoidRootPart") and Mon.Humanoid.Health > 0 then 
                table.insert(Result, Mon)
            end 
        end)
        
        table.foreach(game.ReplicatedStorage:GetChildren(), function(_, Mon) 
            if Mon and Mon:FindFirstChild("Humanoid") and Mon:FindFirstChild("HumanoidRootPart") and Mon.Humanoid.Health > 0 then 
                table.insert(Result, Mon)
            end
        end)
        
        table.sort(Result, function(C1, C2) return CaculateDistance(C1.HumanoidRootPart.CFrame) < CaculateDistance(C2.HumanoidRootPart.CFrame) end) 
        
        
        return Result
    end 
    print(1.5)
    function GetMeleeIdByName(MeleeName) 
        for Index, Melee in MeleesTable do 
            if Melee == MeleeName then 
                return MeleesId[Index] 
            end 
        end 
    end 

    function BuyMelee(M1, Check) 
        if Check then 
            
            local Response_ =  Remotes.CommF_:InvokeServer("Buy" .. M1, true) 
            print('Response_', Response_ == 1, typeof(Response_))
            
            return Response_ == 1 
        end 
        return Remotes.CommF_:InvokeServer("Buy" .. M1) 
    end 

    function SendKey(key, hold)
        (
            function()
                game:GetService("VirtualInputManager"):SendKeyEvent(true, key, false, game)
                task.wait(hold)
                game:GetService("VirtualInputManager"):SendKeyEvent(false, key, false, game)
            end
        )()
    end

    function FruitIdToName(FruitId) 
        local ParserResult = string.match(FruitId, "(((%u)%-?)([^-.]+))$");
        
        return ParserResult .. " Fruit"
    end 

    function Split(inputstr, sep)
        if sep == nil then
            sep = "%s"
        end
        local t = {}
        for str in string.gmatch(inputstr, "([^" .. sep .. "]+)") do
            table.insert(t, str)
        end
        return t
    end

    function FruitNameToId(FruitName) 
        local Id = Split(FruitName)[1]
        return Id .. "-" .. Id
    end 

    local QuestManager = {
        CurrentLevel = 2, 
        DoubleQuest = true, 
        CurrentQuests = {},
        BlacklistedQuestIds = {
            BartiloQuest = 1, 
            CitizenQuest = 1, 
            Trainees = 1, 
            MarineQuest = 1, 
            ImpelQuest = 1
        }
    } 

    local NpcList = require(game.ReplicatedStorage.GuideModule).Data.NPCList

    repeat task.wait() until game.Players.LocalPlayer.DataLoaded and ScriptStorage 

    QuestManager.Quests = require(game.ReplicatedStorage.Quests) 

    function QuestManager.Set(Self, Index, Value) 
        Self[Index] = Value
    end 

    function QuestManager.RefreshQuest(Self) 
        
        while not ScriptStorage.PlayerData.Level  do 
            task.wait(1) 
            print("[ Debug ] Waiting for LocalPlayer datas.")
        end 
        
        local QuestLevelFlag = 0  
        local CurrentQuestData 
        
            
        for QuestID, QuestDatas in QuestManager.Quests do 
            if not QuestManager.BlacklistedQuestIds[QuestID] then
                
                
                if ( QuestDatas[1].LevelReq >= QuestLevelFlag and QuestDatas[1].LevelReq <= ScriptStorage.PlayerData.Level ) then
                    
                    
                    QuestLevelFlag = QuestDatas[1].LevelReq  
                    CurrentQuestData = QuestDatas
                    Self.CurrentQuestId = QuestID
                    if ScriptStorage.PlayerData.Level >= 1500 and SeaIndex == 2 and QuestID == "ForgottenQuest" then 
                        break 
                    end 
                end
            end
        end
        
        
        local LastQuest = CurrentQuestData[#CurrentQuestData] 
        
        for _, Count in LastQuest.Task do 
            if Count == 1 then 
                table.remove(CurrentQuestData, #CurrentQuestData)
            end 
        end 
        
        for i, v in require(game.ReplicatedStorage.GuideModule).Data.NPCList do
            
            for i1, v1 in v.Levels do
                
                if v1 == CurrentQuestData[#CurrentQuestData].LevelReq then
                    Self.CurrentNpc = i.CFrame
                end
            end
        end 
        
        
        Self.CurrentQuests = CurrentQuestData 
    end

    function QuestManager.GetCurrentQuest(Self) 
        
        local QuestIndex = Self.CurrentQuests[Self.CurrentLevel] and Self.CurrentQuests[Self.CurrentLevel].LevelReq <= ScriptStorage.PlayerData.Level and Self.CurrentLevel or 1 
        
    --print(Self.CurrentQuests[QuestIndex], Self.CurrentQuests[QuestIndex].NameMon)
    
        for Name in Self.CurrentQuests[QuestIndex].Task do 
            
            return Name, Self.CurrentNpc, Self.CurrentQuestId, QuestIndex, Self.CurrentQuests[QuestIndex].Name
        end 
    end 

    function QuestManager.MarkAsCompleted(Self)
        Self.CurrentLevel = Self.CurrentLevel == 2 and 1 or 2
    end  

    function QuestManager.AbandonQuest() 
        print("Abandon quest")
        Remotes.CommF_:InvokeServer("AbandonQuest")
    end 

    function QuestManager.GetCurrentClaimQuest(RawResponse) 

        
        local QuestTitle = game.Players.LocalPlayer.PlayerGui.Main.Quest .Visible and game.Players.LocalPlayer.PlayerGui.Main.Quest .Container.QuestTitle.Title.Text:gsub("%s*Defeat%s*(%d*)%s*(.-)%s*%b()", "%2")
        return ( type(QuestTitle) == "string" and string.gsub(QuestTitle, "Military ", "Mil. ") or QuestTitle ), game.Players.LocalPlayer.PlayerGui.Main.Quest .Container.QuestTitle.Title.Text
    end 

    function QuestManager.StartQuest(QuestId, QuestLevel) 
        
        return Remotes.CommF_:InvokeServer("StartQuest", QuestId, QuestLevel) 
        
    end

    ScriptStorage.MobRegions = {} 
    for _, Region in game:GetService("ReplicatedStorage").FortBuilderReplicatedSpawnPositionsFolder:GetChildren() do 
        ScriptStorage.MobRegions[tostring(Region)] = ScriptStorage.MobRegions[tostring(Region)] or {} 
        table.insert(ScriptStorage.MobRegions[tostring(Region)], Region.CFrame)
    end 

    TweenController = {} 


    local LastestTeleportToHomePoint = 0
    local Entries = {} 

    for _, NPC in game.ReplicatedStorage.NPCs:GetChildren() do 
        if NPC.Name == "Set Home Point" then 
            table.insert(Entries, NPC:GetModelCFrame())
        end 
    end 

    function TweenController.Update() 

        
        local Part = game.Players.LocalPlayer.Character.HumanoidRootPart
        
        
        HumanoidRootPart = game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart") 
        
        if CaculateDistance(Part.CFrame) > 250 then
            pcall(function() 
                TweenInstance:Cancel()
            end) 
            TweenDebounce = true
            
            Part.CFrame = HumanoidRootPart.CFrame
            
            
            TweenDebounce = false
        end
        
        HumanoidRootPart.CFrame = Part.CFrame+Vector3.new(0,3,0)
    end



    function GetPortal(Position) 
        local Nearest, Current = 9e9, nil
        for _, Portal in Portals do
            local Dist1 = CaculateDistance(Portal, Position)
            if Dist1 < ( CaculateDistance(Position)-300 ) and Dist1 < Nearest then 
                Nearest = Dist1 
                Current = Portal
                
            end 
        end 
        
        if Current then 
            Remotes.CommF_:InvokeServer("requestEntrance", Current)
            return task.wait()
        end 
    end 

    function GetEntries(Position) 
        local Nearest, Current = 9e9, nil
        for _, Entry in Entries do
            local Dist1 = CaculateDistance(Entry, Position)
            if Dist1 < ( CaculateDistance(Position) - 700 ) and Dist1 < Nearest then 
                Nearest = Dist1 
                Current = Entry
                
            end 
        end 
        
        if Current then 
            if os.time() - LastestTeleportToHomePoint > 30 then 
                for i=1,10,1 do 
                    task.wait() 
                    
                end 
            end 
        end 
    end 

    function TweenController.Tween2(ePart, Position) 
        TweenInstance2 = Services.TweenService:Create(
                ePart,
                TweenInfo.new(CaculateDistance(ePart.CFrame, Position) / 50, Enum.EasingStyle.Linear),
                {CFrame = ConvertTo(CFrame, Position)-Vector3.new(0,0,0)}
            )
        TweenInstance2:Play()
    end

    function TweenController.Create(Position)
        
        
        if not Position or TweenDebounce then return end 
        local Position = typeof(Position) ~= "CFrame" and ConvertTo(CFrame, Position) or Position
        
        
        if TweenInstance then 
            pcall(function() 
                TweenInstance:Cancel() 
            end)
        end 
        
        for _, part in ipairs(game.Players.LocalPlayer.Character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = false
            end
        end
        local head = game.Players.LocalPlayer.Character:WaitForChild("Head")
        if not head:FindFirstChild("eltrul") then
            local bodyVelocity = Instance.new("BodyVelocity")
            bodyVelocity.Name = "eltrul"
            bodyVelocity.MaxForce = Vector3.new(0, math.huge, 0)
            bodyVelocity.Velocity = Vector3.zero
            bodyVelocity.Parent = head
        end
    
    if CaculateDistance(Position) > 500 then 
            if SeaIndex == 3 and not ScriptStorage.Backpack["Valkyrie Helm"] then 
            elseif SeaIndex ~= 3 then 
                GetPortal(Position) 
            end 
        
    end 
        
        if CaculateDistance(Vector3.new(11256, -2138, 9888), Position) < ( CaculateDistance(Position) - 700 ) then 
            local SubmarinePos = CFrame.new(-16269, 23, 1371)
            if CaculateDistance(SubmarinePos) > 60 then return TweenController.Create(SubmarinePos) and task.wait(1) end 
            local Net_upvr = require(game.ReplicatedStorage.Modules.Net)
            Net_upvr:RemoteFunction("SubmarineWorkerSpeak"):InvokeServer("TravelToSubmergedIsland") 
        end 
        
        --TweenController.Update()
        
        Position = CFrame.new(Position.Position)
        
        local Dist = CaculateDistance(game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame, Position)
        local playerpos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame 
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(playerpos.x, Position.y, playerpos.z)
        TweenInstance = Services.TweenService:Create(
                game.Players.LocalPlayer.Character.HumanoidRootPart,
                TweenInfo.new(Dist / (Dist < 18 and 25 or 330) , Enum.EasingStyle.Linear),
                {CFrame = Position}
            ) 
        TweenInstance:Play()
    end

    local AttackController = {} 

    local Players = game:GetService("Players")
    local RunService = game:GetService("RunService")
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local Workspace = game:GetService("Workspace")
    local VirtualInputManager = game:GetService("VirtualInputManager")
    local Player = Players.LocalPlayer
    local Modules = ReplicatedStorage:WaitForChild("Modules")
    local Net = Modules:WaitForChild("Net")
    local RegisterAttack = Net:WaitForChild("RE/RegisterAttack")
    local RegisterHit = Net:WaitForChild("RE/RegisterHit")
    local ShootGunEvent = Net:WaitForChild("RE/ShootGunEvent")
    local GunValidator = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("Validator2")
    local AttackConfig = {
        AttackDistance = 65,
        AttackMobs = true,
        AttackPlayers = true,
        AttackCooldown = 0.05,
        ComboResetTime = 0.05,
        MaxCombo = 2,
        HitboxLimbs = {"RightLowerArm", "RightUpperArm", "LeftLowerArm", "LeftUpperArm", "RightHand", "LeftHand"},
        AutoClickEnabled = true
    }
    local FastAttack = {}
    FastAttack.__index = FastAttack
    function FastAttack.new()
        local self = setmetatable({
            Debounce = 0,
            ComboDebounce = 0,
            ShootDebounce = 0,
            M1Combo = 0,
            EnemyRootPart = nil,
            Connections = {},
            Overheat = {Dragonstorm = {MaxOverheat = 3, Cooldown = 0, TotalOverheat = 0, Distance = 350, Shooting = false}},
            ShootsPerTarget = {["Dual Flintlock"] = 2},
            SpecialShoots = {["Skull Guitar"] = "TAP", ["Bazooka"] = "Position", ["Cannon"] = "Position", ["Dragonstorm"] = "Overheat"}
        }, FastAttack)    
        pcall(function()
            self.CombatFlags = require(Modules.Flags).COMBAT_REMOTE_THREAD
            self.ShootFunction = getupvalue(require(ReplicatedStorage.Controllers.CombatController).Attack, 9)
            local LocalScript = Player:WaitForChild("PlayerScripts"):FindFirstChildOfClass("LocalScript")
            if LocalScript and getsenv then
                self.HitFunction = getsenv(LocalScript)._G.SendHitsToServer
            end
        end)    
        return self
    end
    function FastAttack:IsEntityAlive(entity)
        local humanoid = entity and entity:FindFirstChild("Humanoid")
        return humanoid and humanoid.Health > 0
    end
    function FastAttack:CheckStun(Character, Humanoid, ToolTip)
        local Stun = Character:FindFirstChild("Stun")
        local Busy = Character:FindFirstChild("Busy")
        if Humanoid.Sit and (ToolTip == "Sword" or ToolTip == "Melee" or ToolTip == "Blox Fruit") then
            return false
        elseif Stun and Stun.Value > 0 or Busy and Busy.Value then
            return false
        end
        return true
    end
    function FastAttack:GetBladeHits(Character, Distance)
        local Position = Character:GetPivot().Position
        local BladeHits = {}
        Distance = Distance or AttackConfig.AttackDistance    
        local function ProcessTargets(Folder, CanAttack)
            for _, Enemy in ipairs(Folder:GetChildren()) do
                pcall(function()
                    if Enemy ~= Character and self:IsEntityAlive(Enemy) then
                        local BasePart = Enemy:FindFirstChild(AttackConfig.HitboxLimbs[math.random(#AttackConfig.HitboxLimbs)]) or Enemy:FindFirstChild("HumanoidRootPart")
                        if BasePart and (Position - BasePart.Position).Magnitude <= Distance then
                            if not self.EnemyRootPart then
                                self.EnemyRootPart = BasePart
                            else
                                table.insert(BladeHits, {Enemy, BasePart})
                                table.insert(BladeHits, {})
                            end
                        end
                    end
                end)
            end
        end    
        if AttackConfig.AttackMobs then pcall(ProcessTargets, Workspace.Enemies) end
        if AttackConfig.AttackPlayers then pcall(ProcessTargets, Workspace.Characters, true) end    
        return BladeHits
    end
    function FastAttack:GetClosestEnemy(Character, Distance)
        local BladeHits = self:GetBladeHits(Character, Distance)
        local Closest, MinDistance = nil, math.huge 
        for _, Hit in ipairs(BladeHits) do
            local Magnitude = (Character:GetPivot().Position - Hit[2].Position).Magnitude
            if Magnitude < MinDistance then
                MinDistance = Magnitude
                Closest = Hit[2]
            end
        end
        return Closest
    end
    function FastAttack:GetCombo()
        local Combo = (tick() - self.ComboDebounce) <= AttackConfig.ComboResetTime and self.M1Combo or 0
        Combo = Combo >= AttackConfig.MaxCombo and 1 or Combo + 1
        self.ComboDebounce = tick()
        self.M1Combo = Combo
        return Combo
    end
    function FastAttack:ShootInTarget(TargetPosition)
        local Character = Player.Character
        if not self:IsEntityAlive(Character) then return end
        
        local Equipped = Character:FindFirstChildOfClass("Tool")
        if not Equipped or Equipped.ToolTip ~= "Gun" then return end    
        local Cooldown = Equipped:FindFirstChild("Cooldown") and Equipped.Cooldown.Value or 0.3
        if (tick() - self.ShootDebounce) < Cooldown then return end    
        local ShootType = self.SpecialShoots[Equipped.Name] or "Normal"
        if ShootType == "Position" or (ShootType == "TAP" and Equipped:FindFirstChild("RemoteEvent")) then
            Equipped:SetAttribute("LocalTotalShots", (Equipped:GetAttribute("LocalTotalShots") or 0) + 1)
            GunValidator:FireServer(self:GetValidator2())        
            if ShootType == "TAP" then
                Equipped.RemoteEvent:FireServer("TAP", TargetPosition)
            else
                ShootGunEvent:FireServer(TargetPosition)
            end
            self.ShootDebounce = tick()
        else
            VirtualInputManager:SendMouseButtonEvent(0, 0, 0, true, game, 1)
            task.wait(0.05)
            VirtualInputManager:SendMouseButtonEvent(0, 0, 0, false, game, 1)
            self.ShootDebounce = tick()
        end
    end
    function FastAttack:GetValidator2()
        local v1 = getupvalue(self.ShootFunction, 15)
        local v2 = getupvalue(self.ShootFunction, 13)
        local v3 = getupvalue(self.ShootFunction, 16)
        local v4 = getupvalue(self.ShootFunction, 17)
        local v5 = getupvalue(self.ShootFunction, 14)
        local v6 = getupvalue(self.ShootFunction, 12)
        local v7 = getupvalue(self.ShootFunction, 18)
        
        local v8 = v6 * v2
        local v9 = (v5 * v2 + v6 * v1) % v3
        v9 = (v9 * v3 + v8) % v4
        v5 = math.floor(v9 / v3)
        v6 = v9 - v5 * v3
        v7 = v7 + 1    
        setupvalue(self.ShootFunction, 15, v1)
        setupvalue(self.ShootFunction, 13, v2)
        setupvalue(self.ShootFunction, 16, v3)
        setupvalue(self.ShootFunction, 17, v4)
        setupvalue(self.ShootFunction, 14, v5)
        setupvalue(self.ShootFunction, 12, v6)
        setupvalue(self.ShootFunction, 18, v7)
        
        return math.floor(v9 / v4 * 16777215), v7
    end
    function FastAttack:UseNormalClick(Character, Humanoid, Cooldown)
        self.EnemyRootPart = nil
        local BladeHits = self:GetBladeHits(Character)
        
        if self.EnemyRootPart then
            RegisterAttack:FireServer(Cooldown)
            if self.CombatFlags and self.HitFunction then
                self.HitFunction(self.EnemyRootPart, BladeHits)
            else
                RegisterHit:FireServer(self.EnemyRootPart, BladeHits)
            end
        end
    end
    function FastAttack:UseFruitM1(Character, Equipped, Combo)
        local Targets = self:GetBladeHits(Character)
        if not Targets[1] then return end
        
        local Direction = (Targets[1][2].Position - Character:GetPivot().Position).Unit
        Equipped.LeftClickRemote:FireServer(Direction, Combo)
    end
    function FastAttack:Attack()
        if not AttackConfig.AutoClickEnabled or (tick() - self.Debounce) < AttackConfig.AttackCooldown then return end
        local Character = Player.Character
        if not Character or not self:IsEntityAlive(Character) then return end
        
        local Humanoid = Character.Humanoid
        local Equipped = Character:FindFirstChildOfClass("Tool")
        if not Equipped then return end
        
        local ToolTip = Equipped.ToolTip
        if not table.find({"Melee", "Blox Fruit", "Sword", "Gun"}, ToolTip) then return end
        
        local Cooldown = Equipped:FindFirstChild("Cooldown") and Equipped.Cooldown.Value or AttackConfig.AttackCooldown
        if not self:CheckStun(Character, Humanoid, ToolTip) then return end
        
        local Combo = self:GetCombo()
        Cooldown = Cooldown + (Combo >= AttackConfig.MaxCombo and 0.05 or 0)
        self.Debounce = Combo >= AttackConfig.MaxCombo and ToolTip ~= "Gun" and (tick() + 0.05) or tick()
        
        if ToolTip == "Blox Fruit" and Equipped:FindFirstChild("LeftClickRemote") then
            self:UseFruitM1(Character, Equipped, Combo)
        elseif ToolTip == "Gun" then
            local Target = self:GetClosestEnemy(Character, 120)
            if Target then
                self:ShootInTarget(Target.Position)
            end
        else
            self:UseNormalClick(Character, Humanoid, Cooldown)
        end
    end
    print(2000)
    local AttackInstance = FastAttack.new()
    table.insert(AttackInstance.Connections, RunService.Stepped:Connect(function()
        --AttackInstance:Attack()
    end))
    for _, v in pairs(getgc(true)) do
        if typeof(v) == "function" and iscclosure(v) then
            local name = debug.getinfo(v).name
            if name == "Attack" or name == "attack" or name == "RegisterHit" then
                hookfunction(v, function(...)
                    AttackInstance:Attack()
                    return v(...)
                end)
            end
        end
    end

    local Modules = game.ReplicatedStorage.Modules
    local Net = Modules.Net
    local Register_Hit, Register_Attack = Net:WaitForChild("RE/RegisterHit"), Net:WaitForChild("RE/RegisterAttack")
    local Funcs = {}
    function GetAllBladeHits()
        bladehits = {}
        for _, v in pairs(workspace.Enemies:GetChildren()) do
            if v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 
            and (v.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= 65 then
                table.insert(bladehits, v)
            end
        end
        return bladehits
    end
    function Getplayerhit()
        bladehits = {}
        for _, v in pairs(workspace.Characters:GetChildren()) do
            if v.Name ~= game.Players.LocalPlayer.Name and v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 
            and (v.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= 65 then
                table.insert(bladehits, v)
            end
        end
        return bladehits
    end

    local Net = (Services.ReplicatedStorage.Modules.Net)

    local RegisterAttack = require(Net):RemoteEvent("RegisterAttack", true)
    local RegisterHit = require(Net):RemoteEvent("RegisterHit", true)

    function Funcs:Attack()
        
        
        local bladehits = {}
        for r,v in pairs(GetAllBladeHits()) do
            table.insert(bladehits, v)
    
        end
        for r,v in pairs(Getplayerhit()) do
            table.insert(bladehits, v)
        end
        
        if #bladehits == 0 then
            
            return
        end
        
        local args = {
            [1] = nil;
            [2] = {},
            [4] = "078da341"
        }
        for r, v in pairs(bladehits) do
            
            
            RegisterAttack:FireServer(0)
            if not args[1] then
                args[1] = v.Head
            end
            table.insert(args[2], {
                [1] = v,
                [2] = v.HumanoidRootPart
            })
            table.insert(args[2], v)
        end
        
        
        RegisterHit:FireServer(unpack(args))
    end

    task.spawn(function() 
        while task.wait(.06) do 
            if _G.FastAttack == os.time() then 
                pcall(function() 
                    
                    Funcs:Attack() 
                end)
            end 
        end
    end)

    function AttackController.Attack(MonResult) 
        pcall(function() 
            _G.FastAttack = os.time()
        end)
    end 

    CombatController = {
        GRAB = true, 
        GRAB_DISTANCE = SeaIndex == 1 and 250 or 350, 
        
        MAX_ATTACK_DURATION = 3, 
        MAX_ATTACK_DURATION_2 = 60, 
        LEVITATE_TIME = 1, 
        
        CurrentIndex = 1, 
    }

    LastFound = os.time()
    -- save center pos vao attribute cua con mob r set de cho do bi move idk

    function CombatController.Grab(MobName) 
        
        pcall(sethiddenproperty, game.Players.LocalPlayer, "SimulationRadius", math.huge)
    if not CombatController.GRAB or GrabDebounce == os.time() 
        then  end 
        GrabDebounce = os.time()
        
        local MidPoint, Count = Vector3.zero, 0 
        ForcePosition = nil 
        local MobsTable = {} 
        
        for _, Mon in Services.Workspace.Enemies:GetChildren() do 
            
            if Mon.Name == MobName then 
                
                if --not Mon:GetAttribute("IsGrabbedreci") and 
                Mon:FindFirstChild("Humanoid") and Mon.Humanoid.Health > 0 then
                    
                    local MonPosition = Mon.HumanoidRootPart.Position 
                    --print("isnetworkowner", isnetworkowner(Mon.PrimaryPart))
                    if MonPosition and isnetworkowner(Mon.PrimaryPart) then 
                        if not ForcePosition or CaculateDistance(MonPosition, ForcePosition) < CombatController.GRAB_DISTANCE 
                        then
                            
                            
                            Count = Count + 1 
                            Mon:SetAttribute("OldPosition", Mon:GetAttribute("OldPosition") or MonPosition)
                            MidPoint = 
                            MidPoint + MonPosition
                            ForcePosition = ForcePosition or MonPosition
                            
                            table.insert(MobsTable, Mon) 
                        end
                    end
                end
            end
        end 
        MidPoint = CFrame.new( MidPoint / Count )
        
        table.foreach(MobsTable, function(_, ChildInstance) 
            (function() 
                if ChildInstance:GetAttribute("IgnoreGrab") then return end
                if (ChildInstance:GetAttribute("FailureCount") or 0) > 7 then return end
                --[[ChildInstance.Humanoid.PlatformStand = true
                ChildInstance.Humanoid.Sit = true
                ChildInstance.HumanoidRootPart.CanCollide = false ]]
                local RootPart = ChildInstance:FindFirstChild("HumanoidRootPart")
                local BodyVelocity = RootPart:FindFirstChild("FarmingVelocity")
                if not BodyVelocity then
                    BodyVelocity = Instance.new("BodyVelocity")
                    BodyVelocity.Name = "FarmingVelocity"
                    BodyVelocity.MaxForce = Vector3.new(4000, 4000, 4000)
                    BodyVelocity.Parent = RootPart
                end
                
                BodyVelocity.Velocity = Vector3.new(0, 0, 0)
                
                local BodyPosition = RootPart:FindFirstChild("FarmingPosition")
                if not BodyPosition then
                    BodyPosition = Instance.new("BodyPosition")
                    BodyPosition.Name = "FarmingPosition"
                    BodyPosition.MaxForce = Vector3.new(4000, 4000, 4000)
                    BodyPosition.P = 4.12
                    BodyPosition.D = 1000
                    BodyPosition.Parent = RootPart
                end
                ChildInstance:SetAttribute("IsGrabbed", true)
                ChildInstance.HumanoidRootPart.CFrame = MidPoint
                
                ChildInstance:SetAttribute("MidPoint", MidPoint)
            end)()
        end)
    end 

    function Sort1(N) 
        return N and N:FindFirstChild("HumanoidRootPart") and math.floor(CaculateDistance(N.HumanoidRootPart.CFrame))
    end 

    function CombatController.Search(MobTable) 
        
        local Lists = {}
        local Found = false
        for _, ChildInstance in GetMonAsSortedRange() do
            if table.find(MobTable, ChildInstance.Name) and ChildInstance:FindFirstChild("Humanoid") and ChildInstance.Humanoid.Health > 0 then 
                if (ChildInstance:GetAttribute("FailureCount") or 0) < 3 then 
                    Found = true
                    table.insert(Lists, ChildInstance) 
                end 
            end
        end
        
        table.sort(Lists, function(a, b) 
            return Sort1(a) < Sort1(b)
        end)
        
        if Found then 
            local Mon1 = Lists[1] 
            return Mon1
        end
        
        for _, ChildName in MobTable do 
            local MonResult2 = game.ReplicatedStorage:FindFirstChild(ChildName) 
            if MonResult2 then 
                return MonResult2
            end 
        end 
    end 

    function CombatController.Attack(MobTable, NearbyHit, Range, Callback)
        
        if ScriptStorage.Tools["Sweet Chalice"] and getsenv(game.ReplicatedStorage.GuideModule)['_G']['InCombat'] then 
            TweenController.Create(Vector3.new(0,0,0)) 
            return
        end
        
        sethiddenproperty(game.Players.LocalPlayer, "SimulationRadius", math.huge)
        MobTable = type(MobTable) == "string" and {MobTable} or ( MobTable or {} ) 
        
        for _, Child in (MobTable) do
            local ChildName = tostring(Child)
            if ChildName == "Deandre" or ChildName == "Urban" or ChildName == "Diablo" and (os.time() - (LastFire12 or 0)) > 180 then 
                LastFire12 = os.time()
                Remotes.CommF_:InvokeServer("EliteHunter")
            end 
            
            if NearbyHit then  
                local Mon = GetMonAsSortedRange()[1]
                
                local MonPosition = Mon and Mon:FindFirstChild("HumanoidRootPart") and Mon.HumanoidRootPart.Position 
                if MonPosition and
                CaculateDistance(MonPosition) < Range then 
                
                    MonResult = Mon
                    
                end 
            else 
                MonResult = CombatController.Search(MobTable)
                
            end 
            
            
            if MonResult then
                LastFound = os.time()
                local Count, Debounce = 0, os.time()
                local Count2, Debounce = 0, os.time()
                while task.wait() do
                    if _G.Stop then return end
                    
                    
                    if ScriptStorage.Tools["Sweet Chalice"] and getsenv(game.ReplicatedStorage.GuideModule)['_G']['InCombat'] then 
                        TweenController.Create(Vector3.new(0,0,0)) 
                        return
                    end 
                    
                    
                    local MobHumanoid = MonResult:FindFirstChild("Humanoid")
                    local MobHumanoidRootPart = MonResult:FindFirstChild("HumanoidRootPart")
                    
                    if not MobHumanoid or MobHumanoid.Health <= 0 then 
                        if MonResult.Name == "Don Swan" then 
                            Storage:Set("SwanDefeated", true)
                            -- Hop()
                        end 
                        break
                    end 
                    
                    

                
                
                    TweenController.Create(CaculateCircreDirection(MobHumanoidRootPart.CFrame) + Vector3.new(0,35,0))
                    
                        
                    
                    if CaculateDistance(MobHumanoidRootPart.Position + Vector3.new(0,35,0)) < 150 then
                        _ = Callback and Callback()
                        CombatController.Grab(Child or "")
                        if MonResult.Name ~= "Core" then 
                            if ScriptStorage.PlayerData.Level > 100 and Count2 >= CombatController.MAX_ATTACK_DURATION_2 and MobHumanoid.Health - MobHumanoid.MaxHealth == 0 then 
                                SetTask("SubTask", "Hop Server - Mob Health Unchanged ( " .. MobHumanoid.Health .. " / " .. MobHumanoid.MaxHealth .. ")")
                                alert("Stuck", "Mob health unchanged")
                                -- _G.Stop = true
                                -- Hop("Mob Health Stuck")
                            end
                            
                            if ( MonResult:GetAttribute("FailureCount") or 0 ) > 5 then 
                                -- Hop("Failed to attack")
                            end 
                            if Count >= CombatController.MAX_ATTACK_DURATION and MobHumanoid.Health - MobHumanoid.MaxHealth == 0 then 
                                Count = 0 
                                
                                local OldPosition = MonResult:GetAttribute("OldPosition") 
                                
                                if OldPosition then
                                    MonResult:SetPrimaryPartCFrame(CFrame.new(OldPosition))
                                    MonResult:SetAttribute("IgnoreGrab", true)
                                    MonResult:SetAttribute("FailureCount", (MonResult:GetAttribute("FailureCount") or 0) + 1)
                                    alert("Failed to attack", "Returning to the old position ( #" .. MonResult:GetAttribute("FailureCount") .. " )")
                                    while CaculateDistance(MonResult.HumanoidRootPart.CFrame,OldPosition) > 6 and task.wait() do 
                                        MonResult.HumanoidRootPart.CFrame = (CFrame.new(OldPosition)) 
                                    end 
                                    
                                    task.wait()
                                    
                                    return 
                                end 
                            end
                        end
                        FunctionsHandler.LocalPlayerController.Methods.EquipTool:Call(ScriptStorage.ForceToUseSword and "Sword" or "Melee")
                        
                        
                        AttackController:Attack(MonResult)
                        if os.time() ~= Debounce then 
                            Debounce = os.time()
                            
                            Count = Count + 1
                            Count2 = Count2 + 1
                        end 
                        if Count > 30 and MonResult.Name ~= "Core" then
                            alert("Take more than 30s to attack, cancelling")
                            break
                        end
                        
                    else 
                        
                        return
                    end  
                end
            elseif not NearbyHit then 
                
                if (os.time() - LastFound) > 200 then 
                    alert("Cyndral", "Error while farming, rejoin")
                    -- Hop("Attack time is bigger than 180, hop")
                    return
                end 
                
                local Region = ScriptStorage.MobRegions[Child] 
                
                if not Region then 
                    local Inst = Services.Workspace.Enemies:FindFirstChild(Child) or game.ReplicatedStorage:FindFirstChild(Child) 
                    
                    Region = Inst and {Inst:GetPrimaryPartCFrame().p} 
                end 
                
                if not Region then 
                    Report("[ Game data error ] Mob with name ".. tostring(Child) .. " have no spawn region datas")
                    return 
                end
                
                local CurrentPosition
                
                if not Region[CombatController.CurrentIndex] then 
                    CombatController.CurrentIndex = 1
                    
                end 
                
                CurrentPosition = Region[CombatController.CurrentIndex] 
                
                local Count2 = os.time()
                
                
                    
            
            TweenController.Create(CurrentPosition+Vector3.new(0,35,35))
            task.wait()
            if CaculateDistance(CurrentPosition+ Vector3.new(0,35,35)) < 15 then
                
                    CombatController.CurrentIndex = CombatController.CurrentIndex + 1
                end
        
                task.wait()
            end
        end 
    end 


    LevelFarmTTL = 0 
    LastTravel = os.time() 

    FunctionsHandler = {
        Initalized = false 
    }; 

    print(3000)
    setmetatable(FunctionsHandler, {
        __index = function(Self, Index) 
            QueryResult = rawget(Self, Index) 
            
            if not QueryResult then 
                
                return {
                    Register = function(Coditional) 
                        if Coditional == false then return end 
                        
                        Result = {
                            CacheListener = {}, 
                            RealCache = {},
                            Methods = {}, 
                            Constants = {}, 
                            Events = {}, 
                            Initalized = true
                        } 
                        
                        function Result.RegisterMethod(Self, Name, Function) 
                            Self.Methods[Name] =
                            {
                                Name = Name, 
                                Callback = Function,
                                Call = function(Self, ...) 
                                    return Self.Callback(...) 
                                    
                                end, 
                                Events = {} 
                                
                            }
                            return true
                            
                        end 
                        
                        setmetatable(Result.Constants, {
                                __newindex = function() 
                                    assert(false, "cannot change constant value!") 
                                    
                            end
                        })
                    
                            if Self.Constants[Key] then  
                        function Result.SaveConstant(Self, Key, Value) 
                                return assert(false, "constant name was used before!") 
                            end 
                            
                            rawset(Self.Constants, Key, Value)
                            
                        end 
                        
                        function Result.Set(Self, Key, Value) 
                            Self.CacheListener[Key] = Value 
                            return Value
                            
                        end
                        
                        function Result.Get(Self, Index) 
                            return Self.Constants[Index] or Self.RealCache[Index]
                            
                        end 
                        
                        function Result.AddVariableChangeListener(Self, Index, Callback) 
                            Self.Events[Index] = Callback
                            
                        end
                        
                        Result.CacheListener.__parent = Result; 
                        
                        setmetatable(Result.CacheListener, {
                            __newindex = function(Self, Key, Value) 
                                _ = Self.__parent.Events[Key] and Self.__parent.Events[Key](Key, Value)
                                
                                Self.__parent.RealCache[Key] = Value
                                
                            end 
                        })
                        
                        
                        
                        FunctionsHandler[Index] = Result
                        
                    end, 
                    Initalized = false
                }
            end 
            
            return QueryResult
            
        end 
    })

    function FunctionsHandler.SynchorizeUntilModuleLoaded(Self, Timeout) 
        local StartTime = os.time() 
        
        while not Self.Initalized do 
            task.wait() 
            local Difference = os.time() - StartTime 
            
            assert(not ( Timeout and Difference > Timeout ), "timed out")
        end 
    end 


    function GetCurrentClaimQuest(RawResponse) 
        local QuestTitle = game.Players.LocalPlayer.PlayerGui.Main.Quest .Visible and game.Players.LocalPlayer.PlayerGui.Main.Quest .Container.QuestTitle.Title.Text:gsub("%s*Defeat%s*(%d*)%s*(.-)%s*%b()", "%2")
        return ( type(QuestTitle) == "string" and string.gsub(QuestTitle, "Military ", "Mil. ") or QuestTitle ), game.Players.LocalPlayer.PlayerGui.Main.Quest .Container.QuestTitle.Title.Text
    end 


    --[[
    'Legendary Haki', 'Moon', 'Legendary Sword',
    'Prehistoric Island', 'Mirage', 'Rare Boss', 'Castle', 'Elite'
    ]]
    -- URL encode function
    function urlencode(str)
        if (str == nil) then
            return ""
        end
        str = tostring(str)
        -- Replace line breaks with CRLF
        str = str:gsub("\n", "\r\n")
        -- Encode characters that are not unreserved (A-Z, a-z, 0-9, -, _, ., ~)
        str = str:gsub("([^%w%-_%.~])", function(c)
            return string.format("%%%02X", string.byte(c))
        end)
        return str
    end
    --dc a
    
    function AsynclyPullServerDatas(Category) 
        alert('Search for ' .. Category .. ' Servers...')
        local Url = ('https://api-bf.yummydata.click/data-private?type=') .. urlencode(Category)  
        local Success, Result = pcall(function() 
            local Raw = request{
                Url = Url, 
                Method = 'GET'
            }
            table.foreach(Raw, warn)
            assert(Raw.Success == true) 
            return Services.HttpService:JSONDecode(Raw.Body)
        end) 
        
        if not Success then 
            print('Failed to serialize datas', Result)
            return {} 
        end 
        
        return Result.data 
    end 

    function WrapToServer (Category, Filter, IgnoreHop) 
        if LastestWrapRequest and os.time() - LastestWrapRequest < 10 then return end 
        LastestWrapRequest = os.time() 
        print('Search for rare boss: ', Category)
        local ServerLists = AsynclyPullServerDatas(Category) 
        if #ServerLists == 0 then 
            return false 
        end 
        
        for Attempts = 1, #ServerLists, 1 do 
            local Server = ServerLists[math.random((#ServerLists > 50 and #ServerLists - 50 or 0), #ServerLists)] 
            if Server and not Storage:Get(Server.JobId) and Server.Players ~= '12/12' then 
                if not Filter or Filter(Server) then 
                    alert('Attempt to join ' .. Server.JobId ..'Players:' .. Server.Players)
                    setclipboard(Server.JobId)
                    Storage:Set(Server.JobId, true)
                    game:GetService('TeleportService'):TeleportToPlaceInstance(game.placeId,Server.JobId,game.Players.LocalPlayer)
                    task.wait(5) 
                end 
            end 
        end
        if not IgnoreHop then 
            -- Hop('Failed to find servers, hop')
        end 
    end 
    -- LP Controller 

    FunctionsHandler.LocalPlayerController.Register()
    -- Exp Redeem 

    FunctionsHandler.ExpRedeem:Register() 

    -- Level Farm 

    FunctionsHandler.LevelFarm:Register() 

    -- Items / Sword

    FunctionsHandler.Saber:Register()
    FunctionsHandler.Rengoku:Register()
    FunctionsHandler.Yama:Register()
    FunctionsHandler.Tushita:Register()
    FunctionsHandler.SpikeyTrident:Register()
    FunctionsHandler.SharkAchor:Register()
    FunctionsHandler.Pole:Register()
    FunctionsHandler.FoxLamp:Register()
    FunctionsHandler.DarkDagger:Register()
    FunctionsHandler.Canvander:Register()
    FunctionsHandler.BuddySword:Register()
    FunctionsHandler.HallowScythe:Register()
    FunctionsHandler.CursedDualKatana:Register()

    -- Items / Guns 

    FunctionsHandler.AcidumRifle:Register()
    FunctionsHandler.Kabucha:Register()
    FunctionsHandler.VenomBow:Register()
    FunctionsHandler.SoulGuitar:Register()
    FunctionsHandler.DragonStorm:Register()

    -- Items / Etc

    FunctionsHandler.InsictV2:Register()
    FunctionsHandler.RainbowSaviour:Register()

    -- Puzzles / First Sea

    FunctionsHandler.DarkBladeV2:Register()
    FunctionsHandler.SecondSeaPuzzle:Register()

    -- Puzzles / Second Sea

    FunctionsHandler.ColosseumPuzzle:Register()
    FunctionsHandler.Trevor:Register()
    FunctionsHandler.EvoRace:Register()
    FunctionsHandler.Wenlocktoad:Register()
    FunctionsHandler.DarkBladeV3:Register()
    FunctionsHandler.ThirdSeaPuzzle:Register()

    -- Puzzles / Third Sea 

    FunctionsHandler.DojoQuest:Register()
    FunctionsHandler.RaceAwakening:Register()
    FunctionsHandler.PirateRaid:Register()

    -- Functions / Raid 

    FunctionsHandler.RaidController:Register() 

    -- Functions / Auto Melees 

    FunctionsHandler.MeleesController:Register() 

    FunctionsHandler.Superhuman:Register()
    FunctionsHandler.DeathStep:Register()
    FunctionsHandler.SharkmanKarate:Register()
    FunctionsHandler.ElectricClaw:Register()
    FunctionsHandler.DragonTalon:Register()
    FunctionsHandler.Godhuman:Register()

    -- Functions / Boss Task 

    FunctionsHandler.BossesTask:Register() 
    FunctionsHandler.SpecialBossesTask:Register() 
    -- Functions / CollectDrops
    FunctionsHandler.CollectDrops:Register() 

    -- Functions / UtillyItemsActivitation

    FunctionsHandler.UtillyItemsActivitation:Register() 

    -- Exp Redeem 

    FunctionsHandler.ExpRedeem:RegisterMethod("Refresh", function() 
        
        --Report("Typeof: " .. typeof(Storage))
        
        return ScriptStorage.PlayerData.Level < MaxLevel and getsenv(game.ReplicatedStorage.GuideModule)._G.ServerData.ExpBoost == 0 and not Storage.Get(Storage, "IsCodesRanOut")
    end)

    FunctionsHandler.ExpRedeem:RegisterMethod("Start", function() 
        local Code = ({
                "BANEXPLOIT",
                "NOMOREHACK",
                "WildDares",
                "BossBuild",
                "GetPranked",
                "EARN_FRUITS",
                "Sub2UncleKizaru",
                "FIGHT4FRUIT",
                "kittgaming",
                "TRIPLEABUSE",
                "Sub2CaptainMaui",
                "Sub2Fer999",
                "Enyu_is_Pro",
                "Magicbus",
                "JCWK",
                "Starcodeheo",
                "Bluxxy",
                "SUB2GAMERROBOT_EXP1",
                "Sub2NoobMaster123",
                "Sub2Daigrock",
                "Axiore",
                "TantaiGaming",
                "StrawHatMaine",
                "Sub2OfficialNoobie",
                "TheGreatAce",
                "SEATROLLING",
                "24NOADMIN",
                "ADMIN_TROLL",
                "NEWTROLL",
                "SECRET_ADMIN",
                "staffbattle",
                "NOEXPLOIT",
                "NOOB2ADMIN",
                "CODESLIDE",
                "fruitconcepts"
            })
        
        for Index, Promo in Code do
            
            SetTask("MainTask", "Code Redemption | " .. Promo .. " | Redeeming...")
            local Response = (Remotes.Redeem:InvokeServer(Promo))
            task.wait() 
            SetTask("MainTask", "Code Redemption | " .. Promo .. " | " .. (Response or "Failed"))
            if getsenv(game.ReplicatedStorage.GuideModule)._G.ServerData.ExpBoost == 0 then 
                
                if Response and string.find(Response, "SUCC") then 
                    return SetTask("MainTask", "Code Redemption | X2 Exp Boost Activated!") and task.wait(1)
                end 
                else 
                    return  
            end
        end
        
        Storage:Set("IsCodesRanOut", 1)
        Storage:Save()
    end)


    -- Level Farm 


    FunctionsHandler.LevelFarm:RegisterMethod("Refresh", function() 
            local Level = ScriptStorage.PlayerData.Level 
            if Level < 50 then 
                return 1
            elseif Level < 80 then 
                return 2
            else 
                return 4
            end 
            return true 
    end)

    FunctionsHandler.LevelFarm:RegisterMethod("Start", function(Level) 
        if SeaIndex == 3 then 
            if ( ScriptStorage.Backpack.Bones or {Count = 0}).Count >= 50 then 
                
                if os.time() > (BonesCooldown or 0) then 
                    
                    local _, _, State, Message = Remotes.CommF_:InvokeServer("Bones", "Check") 
                    print("State", State, "Message", Message)
                    if tonumber(State or 1) == 0 then 
                        local SplitedNum = Split(Message, ":")
                        local SecondsLeft = ((tonumber(SplitedNum[1]) * 60) + tonumber(SplitedNum[2])) * 60 
                        BonesCooldown = os.time() + SecondsLeft
                        print("Next", BonesCooldown)
                    else 
                        print("Roll")
                        if CaculateDistance(Vector3.new(-8727, 143, 6249)) > 30 then 
                            TweenController.Create(Vector3.new(-8727, 143, 6249))
                            return task.wait(2)
                        end
                        Remotes.CommF_:InvokeServer("Bones", "Buy", 1, 1)
                    end
                end 
            end 
        end 
        
        local PlayerLevel = ScriptStorage.PlayerData.Level 
        if GodHumanFlag then 
        
            local Material, MaterialData = (function() 
                getgenv()["     mphm >< <3"] = {}
                for Material, MaterialData in GodhumanMaterials do 
                    if ( ScriptStorage.Backpack[Material] or {Count = 0} ).Count < MaterialData[1] then 
                        getgenv()["     mphm >< <3"] = {Material, MaterialData}
                    end
                end
                
                return unpack(getgenv()["     mphm >< <3"])
            end)() 
            
            if Material then
                if SeaIndex ~= MaterialData[2] then 
                    alert("Material - " .. Material, "Travelling sea " .. MaterialData[2])
                    SetTask("MainTask", "Sea Travel | Godhuman Materials | Travelling to Sea " .. MaterialData[2])
                    
                    Remotes.CommF_:InvokeServer("Travel" .. SeaIndexes[MaterialData[2]]) 
                    return 
                end 
                
                SetTask("MainTask", "Material Farming | Godhuman | " .. Material .. " | In Progress")
                
                if PlayerLevel >= MaterialData[4][3] then 
                    local QuestAvailable, CurrentClaimQuest = GetCurrentClaimQuest() 
                    if QuestAvailable then 
                        if not string.find(CurrentClaimQuest, MaterialData[3][1]) and not string.find(CurrentClaimQuest, MaterialData[3][2]) then
                            
                            QuestManager.AbandonQuest() 
                        else 
                            CombatController.Attack(MaterialData[3])
                            return
                        end
                    else
                                
                        local NpcPosition1 = ScriptStorage.NPCs[MaterialData[4][4]] 
                        NpcPosition1 = NpcPosition1 and NpcPosition1:GetModelCFrame() 
                        
                        if NpcPosition1 then
                            TweenController.Create(NpcPosition1 + Vector3.new(0,5,3)) 
                            if CaculateDistance(NpcPosition1) < 10 then 
                                task.wait(1) 
                            else 
                                return 
                            end
                        else 
                            Report("NPC HauntedQuest2 not found")
                        end 
                        QuestManager.StartQuest(MaterialData[4][1], MaterialData[4][2])
                        return
                    end
                end
                
                CombatController.Attack(MaterialData[3])

            end
            
            Remotes.CommF_:InvokeServer("BuyGodhuman", true)
            Remotes.CommF_:InvokeServer("BuyGodhuman")
            
            
            GodHumanFlag = false
            return true
        end
        
        if os.time() - LastTravel > 60 then 
            LastTravel = os.time()
            if PlayerLevel >= 1500 and SeaIndex == 2 then 
                if Config.Settings.StayInSea2UntilHaveDarkFragments and not ScriptStorage.Backpack["Dark Fragment"] then 
                        WrapToServer('Rare Boss', function(Child)
                            print('Server hit', Child['Rare Boss']) 
                            return Child['Rare Boss'] == 'Blackbeard'
                        end)
                elseif not Services.Workspace.Map.IceCastle.Hall.LibraryDoor:FindFirstChild("PhoeyuDoor") then 
                    Remotes.CommF_:InvokeServer("TravelZou")
                    SetTask("MainTask", "Sea Travel | Teleporting to Third Sea")
                end 
            elseif PlayerLevel >= 700 and SeaIndex == 1 then 
                    SetTask("MainTask", "Sea Travel | Teleporting to Second Sea")
                    Remotes.CommF_:InvokeServer("TravelDressrosa")
            end
        end 
        
        if ScriptStorage.Tools["God's Chalice"] and not ScriptStorage.Tools["Mirror Fractal"] then 
            if (ScriptStorage.Backpack["Conjured Cocoa"] or {Count = 0}).Count < 10 then 
                SetTask("MainTask", "Material Farming | Conjured Cocoa | Need 10x | Farming...")
                CombatController.Attack({"Cocoa Warrior", "Chocolate Bar Battler"}) 
                return 
            end
            Remotes.CommF_:InvokeServer("SweetChaliceNpc")
        end 
            
        if ScriptStorage.Tools["Sweet Chalice"] or ( PlayerLevel == MaxLevel and ( ScriptStorage.Backpack.Bones or {Count = 0}).Count >= 500 ) then 
            
            
            SetTask("MainTask", "Fragments Farming | Cake Prince | Dough King")
            
            
            if (ScriptStorage.Tools["Sweet Chalice"]) and ( not SpawnReflect or os.time() - SpawnReflect > 10 ) then 
                task.spawn(function() 
                    while not ScriptStorage.Enemies["Dough King"] and task.wait() and ScriptStorage.Tools["Sweet Chalice"] do 
                        SpawnReflect = os.time() 
                        Remotes.CommF_:InvokeServer("CakePrinceSpawner")
                    end 
                end)
            end 
            
            
            CombatController.Attack({
                "Head Baker",
                "Baking Staff",
                "Cookie Crafter",
                "Cake Guard"
            }) 
        
            if PlayerLevel >= 2200 then
                local IsAvailabe, CurrentClaimQuest2 = GetCurrentClaimQuest() 
                
                
                if IsAvailabe then 
                    if not string.find(CurrentClaimQuest2, "Cookie") then
                        QuestManager.AbandonQuest() 
                    else 
                        
                        Remotes.CommF_:InvokeServer("CakePrinceSpawner")
                        return
                    end 
                else 
                    
                    print("Start Quest")
                    
                    local NpcPosition1 = ScriptStorage.NPCs["Cake Quest Giver 1"] 
                    NpcPosition1 = NpcPosition1 and NpcPosition1:GetModelCFrame() 
                    
                    if NpcPosition1 then
                        TweenController.Create(NpcPosition1 + Vector3.new(0,5,3)) 
                        if CaculateDistance(NpcPosition1) < 10 then 
                            task.wait(1) 
                        else 
                            return 
                        end
                    else 
                        Report("NPC HauntedQuest2 not found")
                    end 
                    QuestManager.StartQuest("CakeQuest1", 1)
                    return
                end 
            end
            print("attack ohoo")
            
            
            return 
        end
        

        
        if PlayerLevel >= 2025 and (getsenv(game.ReplicatedStorage.GuideModule)._G.ServerData.ExpBoost == 0 or PlayerLevel == MaxLevel ) and ( ScriptStorage.Backpack.Bones or { Count = 0 } ).Count < 500 then 
            
            SetTask("MainTask", "Resource Farming | Bones | For X2 Mastery/Beli")

            CurrentClaimQuest3 = GetCurrentClaimQuest(true) 
            
            
            if CurrentClaimQuest3 then 
                if not string.find(CurrentClaimQuest3, "Demonic")  then
                    QuestManager.AbandonQuest() 
                    return
                else 
                    CombatController.Attack({
                        "Reborn Skeleton",
                        "Living Zombie",
                        "Demonic Soul",
                        "Posessed Mummy"
                    })
                return 
                end
            else
                print("StartQuest", CurrentClaimQuest3)
                local NpcPosition1 = ScriptStorage.NPCs["Haunted Castle Quest Giver 2"] 
                NpcPosition1 = NpcPosition1 and NpcPosition1:GetModelCFrame() 
                
                if NpcPosition1 then
                    TweenController.Create(NpcPosition1 + Vector3.new(0,5,3))
                    if CaculateDistance(NpcPosition1) < 20 then 
                        task.wait(1) 
                    else 
                        return 
                    end
                else 
                    Report("NPC HauntedQuest2 not found")
                end 
                
                QuestManager.StartQuest("HauntedQuest2", 1) 
                return
            end
        end 
        
        
        
        if Level == 1 then 
            SetTask("MainTask", "Level Farming | Skip Mode | Floor " .. Level)    
            CombatController.Attack("Sky Bandit")
        elseif Level == 2 then 
            SetTask("MainTask", "Level Farming | Skip Mode | Floor " .. Level)
            CombatController.Attack("God's Guard")
            
        elseif Level == 3 then 
            SetTask("MainTask", "Level Farming | Skip Mode | Floor " .. Level)
            CombatController.Attack({"God's Guard", "Shanda", "Royal Soldier", "Royal Squad"})
        elseif Level == 4 then
            local MonName, NpcPosition, QuestId, QuestIndex, QuestTitle = QuestManager:GetCurrentQuest() 
            CurrentClaimQuest1 = GetCurrentClaimQuest()
            if CurrentClaimQuest1 then 
                if CurrentClaimQuest1 ~= QuestTitle and  CurrentClaimQuest1 ~= ( QuestTitle .. "s" ) then
                    return QuestManager.AbandonQuest() 
                end 
            else 
                
                if not NpcPosition then 
                    return QuestManager:RefreshQuest() and Report("failed to get npc position quest 528")
                end 
                TweenController.Create(NpcPosition + Vector3.new(0,5,3)) 
                SetTask("MainTask", "Level Farming | " .. MonName .. " | Claiming Quest")
                if CaculateDistance(NpcPosition) > 10 then 
                    return 
                end 
                
                task.wait(2)
                LevelFarmTTL = 0 
                QuestManager.StartQuest(QuestId, QuestIndex)
                task.wait(1)
            end 

            SetTask("MainTask", "Level Farming | " .. MonName .. " | Defeating Enemies")
            local AttackTime1 = os.time()
            CombatController.Attack(MonName)
            LevelFarmTTL = LevelFarmTTL + os.time() - AttackTime1 
            if LevelFarmTTL > 160 then
                --Hop("Level TTL is bigger than 160, hop")
            end 
        end
    end)

    -- LP Controller 



    FunctionsHandler.LocalPlayerController:RegisterMethod("EquipTool", function(Tool) 
        
        if not Humanoid then return end 
        
        for _, Item in LocalPlayer.Backpack:GetChildren() do 
            if 
            Item:IsA("Tool") and Item.Name ~= "Tool"
            and (
                Item.Name == tostring(Tool)
                or Item.ToolTip == Tool
                )
            then 
                
                
                LocalPlayer.Character:WaitForChild"Humanoid":EquipTool(Item)
            end 
        end 
    end)

    FunctionsHandler.LocalPlayerController:RegisterMethod("ToggleAbilities", function(Ability, State) 
        
        if Ability == "Buso" then 
            if LocalPlayer:HasTag("Buso") and not State or State then 
                Remotes.CommF_:InvokeServer("Buso")
            end 
            
        elseif Ability == "Observation" then
            
        end 
    end)

    FunctionsHandler.LocalPlayerController:RegisterMethod("ConfigurationAbilitiesToggle", function() 
        FunctionsHandler.LocalPlayerController.Methods.ToggleAbilities:Call("Buso", SCRIPT_CONFIG.BUSO)
        FunctionsHandler.LocalPlayerController.Methods.ToggleAbilities:Call("Observation", SCRIPT_CONFIG.OBSERVATION)
    end)
    print(3)


    -- Items / Saber 




    FunctionsHandler.Saber:RegisterMethod("Refresh", function() 
        
        if not Config.Items.Saber then return end 
        
        if not Config.Items.Saber then 
            return 
        end 
        if SeaIndex ~= 1 then return end 
        
        local Result 
        if ScriptStorage.Backpack.Saber then 
            return 
        end 
        
        if ScriptStorage.PlayerData.Level < 200 then 
            return
        end 
        
        
        local Tasks = Remotes.CommF_:InvokeServer("ProQuestProgress") 
        for _, Value in Tasks.Plates do
            if Value == false then
                Result = 1
                
            end
        end
        
        if not Result then 
            if not Tasks.UsedTorch then
            Result = 2
                
            elseif not Tasks.UsedCup then
                Result = 3
                
            elseif not Tasks.TalkedSon then
                Result = 4
                
            elseif not Tasks.KilledMob then
                Result = 5
                
            elseif not Tasks.UsedRelic then
                Result = 6
                
            elseif
                not Tasks.KilledShanks
                and ScriptStorage.Enemies["Saber Expert"]
            then
                Result = 7
                
            end
        end 
        
        FunctionsHandler.Saber:Set("CurrentProgressLevel", Result)
        FunctionsHandler.Saber:Set("LastestRefreshSenque", os.time()) 
        
        return Result
        
    end) 

    FunctionsHandler.Saber:RegisterMethod("GetQuestplates", function() 
        
        local CachedData = FunctionsHandler.Saber:Get("QuestplatesCache") 
        
        if CachedData then
            return CachedData 
            
        end 
        
        
        
        local Jungle = Services.Workspace.Map.Jungle 
        local Result = {}
        
        table.foreach(Jungle.QuestPlates:GetChildren(), function(_, Inst) 
            _ = Inst:FindFirstChild("Button") and table.insert(Result, Inst) 
            
        end)
        
        FunctionsHandler.Saber:Get("QuestplatesCache", Result)
        
        return Result 
        
    end)

    FunctionsHandler.Saber:RegisterMethod("Start", function() 
        local 
        Progress,
            LastestRefreshSenque = 
            FunctionsHandler.Saber:Get("CurrentProgressLevel"),
        FunctionsHandler.Saber:Get("LastestRefreshSenque") 
        
        print("[ Debug ] Saber quest indexes", Progress)
        if not Progress then
            FunctionsHandler.Saber.Methods.Refresh:Call()
            return FunctionsHandler.Saber.Methods.Start:Call()
        
        elseif Progress == 0 then 
            
        elseif os.time() - LastestRefreshSenque > 60 then 
            FunctionsHandler.Saber.Methods.Refresh:Call()
            
            return FunctionsHandler.Saber.Methods.Start:Call()
        
        else
            if Progress == 1 then 
                local Questplates = FunctionsHandler.Saber.Methods.GetQuestplates:Call()
                
                for Index, Questplate in Questplates do  
                    SetTask("MainTask", "Saber Quest | Quest Plates | Touching " .. Index .. "/5")
                    while CaculateDistance(Questplate.Button.CFrame) > 20 do 
                        task.wait() 
                        TweenController.Create(Questplate.Button.CFrame)
                    end
                    task.wait(1)
                end
            
            elseif Progress == 2 then 
                SetTask("MainTask", "Saber Quest | Torch Puzzle | Using Torch")
                Remotes.CommF_:InvokeServer("ProQuestProgress", "GetTorch")
                task.wait(1) 
                Remotes.CommF_:InvokeServer("ProQuestProgress", "DestroyTorch")
                
            elseif Progress == 3 then  
                SetTask("MainTask", "Saber Quest | Sick Man | Helping with Cup")
                Remotes.CommF_:InvokeServer("ProQuestProgress", "GetCup")
                
                if ScriptStorage.Tools.Cup then 
                    FunctionsHandler.LocalPlayerController.Methods.EquipTool:Call("Cup") 
                    task.wait(1)
                    Remotes.CommF_:InvokeServer( "ProQuestProgress", "FillCup", LocalPlayer.Character.Cup)
                end
                
                Remotes.CommF_:InvokeServer("ProQuestProgress", "SickMan")
                
            elseif Progress == 4 then 
                SetTask("MainTask", "Saber Quest | Rich Son | Getting Information")
                Remotes.CommF_:InvokeServer("ProQuestProgress", "RichSon")
                
                
            elseif Progress == 5 then 
                SetTask("MainTask", "Saber Quest | Mob Leader | Defeating Boss")
                CombatController.Attack("Mob Leader")
                
            elseif Progress == 6 then 
                SetTask("MainTask", "Saber Quest | Relic | Placing at Location")
                Remotes.CommF_:InvokeServer("ProQuestProgress", "RichSon")
                Remotes.CommF_:InvokeServer("ProQuestProgress", "PlaceRelic")
            
            elseif Progress == 7 then 
                SetTask("MainTask", "Saber Quest | Saber Expert | Final Battle")
                CombatController.Attack("Saber Expert")
                
            end
        end
    end)

    Remotes.RefreshQuestPro.OnClientEvent:Connect(FunctionsHandler.Saber.Methods.Refresh.Callback);


    -- Auto Melees

    MeleeLastCursor = 1
    FirstCall = true
    CanPurchase = {} 

    FunctionsHandler.MeleesController:RegisterMethod("Start", function()
        for Cursor, Melee in MeleesTable do
            if Melee ~= 'SanguineArt' then 
                
                
                if not Config.Items.AutoFullyMelees then
                    break 
                end 
                
                Data = MeleePrices[Melee]
                local CanMeleePurchaseable = CanPurchase[Melee] 
                if not CanMeleePurchaseable then 
                    CanPurchase[Melee] = Data.Buy(1)
                    print('CanBuy', Melee, Data.Buy(1))
                end 
                local CanMeleePurchaseable = CanPurchase[Melee] 
                
                
                if not Data then 
                    print("no m1 data")
                    break 
                end
                
                if Melee == "Dragon Talon" then 
                    IsFireEssenceGave = (function()
                        if IsFireEssenceGave ~= nil then
                            return IsFireEssenceGave
                        end 
                        
                        local PurchaseTestResult = Remotes.CommF_:InvokeServer("BuyDragonTalon", true);
                        alert("Dragon Talon Purchased", tostring(typeof(PurchaseTestResult) ~= "string"))
                        return typeof(PurchaseTestResult) ~= "string" and true or false
                    end)()
                    
                    print("IsFireEssenceGave", IsFireEssenceGave)
                    
                    if not IsFireEssenceGave then
                        print("no fire essence provided")
                        break 
                    end 
                end 
                if Melee == "Godhuman" and not GodHumanFlag then 
                    
                    if (ScriptStorage.Melees["Dragon Talon"] or 0) > 399 then
                    
                        if not ScriptStorage.Melees.Godhuman then 
                            
                            Remotes.CommF_:InvokeServer("BuyGodhuman", true)
                            Remotes.CommF_:InvokeServer("BuyGodhuman")
                            FunctionsHandler.LocalPlayerController.Methods.EquipTool:Call("Melee")
                            
                            if not ScriptStorage.Melees.Godhuman then 
                                
                                GodHumanFlag = true
                                return
                            end 
                        end 
                    end 
                end
                
                if not ScriptStorage.Melees[Melee] or ( ScriptStorage .Melees[Melee] or 0) < Data.NextLevelRequirement then 
                    
                    local MeleeId = GetMeleeIdByName(Melee)
                    local PlayerData = ScriptStorage.PlayerData 
                    local ValuementPassed = true 
                    
                    if not MeleeId then 
                        
                        return print("[ Debug ] Failed to get melee id of", Melee) 
                    end 
                    
                    MSet = false 
                    if not CanMeleePurchaseable then 
                        for Index, Value in Data.Price do 
                            if PlayerData[Index] < Value and not FirstCall then 
                                ValuementPassed = false 
                                            
                                    if not ScriptStorage.Melees[Melee] then 
                                        MSet = true
                                        SetTask("SubTask", "Farming Until Enough " .. Index .. " ( ".. Value .. " ) For " .. Melee)
                                    end
                                return
                            end
                        end 
                    end 
                    
                    
                    if not MSet and ScriptStorage.Melees[Melee] and ScriptStorage.Melees[Melee] < Data.NextLevelRequirement then 
                        SetTask("SubTask", "Farming Until Enough Mastery For " .. Melee .. " ( " .. ScriptStorage.Melees[Melee] .. " / " .. Data.NextLevelRequirement .. " ).") 
                        if not ScriptStorage.Tools[Melee] then 
                            print("no m1 found, buy")
                            Data.Buy() 
                        end 
                        return
                    end 
                    
                    
                    if not FirstCall then
                        if ValuementPassed and Data.Requirements() and not ScriptStorage.Tools[Melee] then
                            if Melee == "Dragon Talon" and not IsFireEssenceGave then 
                                alert("IsFireEssenceGave", tostring(IsFireEssenceGave))
                                return SetTask("SubTask", "Waiting until have fire essence for dragon talon.")
                            end 
                            
                            Data.Buy() 
                            
                            
                    
                            FunctionsHandler.LocalPlayerController.Methods.EquipTool:Call("Melee")
                            if not ScriptStorage.Tools[Melee] then
                                
                                
                                task.wait()
                                if not ScriptStorage.Tools[Melee] then 
                                    if ( Melee == "Death Step" or Melee == "Sharkman Karate" ) and SeaIndex ~= 2 then
                                    
                                        alert("Go Back To Second Sea", "Water Key / Library Key")
                                        Remotes.CommF_:InvokeServer("TravelDressrosa")
                                    end 
                                else 
                                    MeleeLastCursor = Cursor + 1
                                    
                                    return
                                end 
                            else 
                                MeleeLastCursor = Cursor + 1
                                return
                            end 
                        end
                    end
                    
                elseif not FirstCall then 
                    MeleeLastCursor = Cursor + 1
                end
            end 
        end
        
        if FirstCall then 
            FirstCall = false 
            return 
        end 
        
        FarmingItem = nil
        
        for ItemName, Item in ScriptStorage.Backpack do
            if Item.Type == "Sword" then 
                
                if Item.Name == "Yama" or Item.Name == "Tushita" then 
                    MasteryRequirement = 350 
                else 
                    for _, Value in Item.MasteryRequirements do 
                    
                        MasteryRequirement = Value
                    end
                end 
                
                if Item.Mastery < MasteryRequirement then 
                    FarmingItem = { Item.Name, Item.Mastery, MasteryRequirement }
                    if Item.Name == "Yama" or Item.Name == "Tushita" then break end 
                end 
            end 
        end 
        if FarmingItem then 
            SetTask('SubTask', 'Farming mastery for ' .. FarmingItem[1] .. ' ( ' .. FarmingItem[2] .. ' / ' .. FarmingItem[3] .. ' )')
            if not ScriptStorage.Tools[FarmingItem[1]] then 
                Remotes.CommF_:InvokeServer("LoadItem", FarmingItem[1])
            end 
            ScriptStorage.ForceToUseSword = FarmingItem
        end
    end) 


    -- Second Sea 

    FunctionsHandler.SecondSeaPuzzle:RegisterMethod("Refresh", function() 
        if ScriptStorage.PlayerData.Level < 700 or SeaIndex ~= 1 then return end 
        if FunctionsHandler.SecondSeaPuzzle:Get("IsCompleted") then return end 
        
        local Response = Remotes.CommF_:InvokeServer("DressrosaQuestProgress") 
        print(959, Response.TalkedDetective, Response.KilledIceBoss)
        if not Response.TalkedDetective then 
            Result = 1 
        elseif not Response.KilledIceBoss then 
            Result = 2 
        else 
            FunctionsHandler.SecondSeaPuzzle:Set("IsCompleted", true) 
        end 
        
        FunctionsHandler.SecondSeaPuzzle:Set("CurrentProgressLevel", Result)
        FunctionsHandler.SecondSeaPuzzle:Set("LastestRefreshSenque", os.time()) 
        
        return Result 
    end)

    FunctionsHandler.SecondSeaPuzzle:RegisterMethod("Start", function() 
        local Progress, LastestRefreshSenque = FunctionsHandler.SecondSeaPuzzle:Get("CurrentProgressLevel"), FunctionsHandler.SecondSeaPuzzle:Get("LastestRefreshSenque") 
        
        FunctionsHandler.SecondSeaPuzzle:Set("CurrentProgressLevel", nil)
        if not Progress then
            FunctionsHandler.SecondSeaPuzzle.Methods.Refresh:Call()
            return FunctionsHandler.SecondSeaPuzzle.Methods.Start:Call()
        elseif Progress == 1 then 
            SetTask("MainTask", "Auto Second Sea - Talk To Detective")
            Remotes.CommF_:InvokeServer( "DressrosaQuestProgress", "Detective")

            Remotes.CommF_:InvokeServer( "DressrosaQuestProgress", "Detective")

            task.wait(1)
            Remotes.CommF_:InvokeServer( "DressrosaQuestProgress", "UseKey")
        elseif Progress == 2 then 
            Remotes.CommF_:InvokeServer( "DressrosaQuestProgress", "Detective")

            Remotes.CommF_:InvokeServer( "DressrosaQuestProgress", "Detective")

            task.wait(1)
            Remotes.CommF_:InvokeServer( "DressrosaQuestProgress", "UseKey")
            SetTask("MainTask", "Auto Second Sea - Defeating Ice Admiral")
            CombatController.Attack("Ice Admiral") 
            Remotes.CommF_:InvokeServer("TravelDressrosa")
        end 
    end)


    -- Bartilo 


    FunctionsHandler.ColosseumPuzzle:RegisterMethod("Refresh", function() 
        if SeaIndex ~= 2 then return end
        
        if ScriptStorage.PlayerData.Level < 850 or ScriptStorage.Backpack["Warrior Helmet"] then return end  
        
        local Response = Remotes.CommF_:InvokeServer("BartiloQuestProgress")
        
        if not Response.KilledBandits then 
            Result = 1 
        elseif not Response.KilledSpring then 
            if ScriptStorage.Enemies.Jeremy then 
                Result = 2 
            end 
        elseif not Response.DidPlates then 
            Result = 3 
        end
        
        FunctionsHandler.ColosseumPuzzle:Set("CurrentProgressLevel", Result)
        FunctionsHandler.ColosseumPuzzle:Set("LastestRefreshSenque", os.time()) 
        return Result 
    end) 
    print(4)
    FunctionsHandler.ColosseumPuzzle:RegisterMethod("Start", function() 
        local Progress, LastestRefreshSenque = FunctionsHandler.ColosseumPuzzle:Get("CurrentProgressLevel"), FunctionsHandler.ColosseumPuzzle:Get("LastestRefreshSenque") 
        FunctionsHandler.ColosseumPuzzle:Set("CurrentProgressLevel", nil)
        print("Progress", Progress)
        if not Progress then
            FunctionsHandler.ColosseumPuzzle.Methods.Refresh:Call()
            return FunctionsHandler.ColosseumPuzzle.Methods.Start:Call()
        elseif Progress == 1 then 
            SetTask("MainTask", "Auto Bartilo Quest - Defeating 50x Swan Pirate")
            local CurrentQuest, RawText = QuestManager:GetCurrentClaimQuest() 
            
            if CurrentQuest then 
                if not string.find(RawText, "50") then
                    
                    QuestManager.AbandonQuest()
                else 
                    CombatController.Attack("Swan Pirate")
                end
            else 
                QuestManager.StartQuest("BartiloQuest", 1)
            end 
            
            
        elseif Progress == 2 then 
            SetTask("MainTask", "Auto Bartilo Quest - Defeating Jeremy")
            CombatController.Attack("Jeremy")
        elseif Progress == 3 then 
            SetTask("MainTask", "Auto Bartilo Quest - Doing Puzzle")
            if CaculateDistance(CFrame.new(
            -1837.46155, 44.2921753, 1656.1987, 
            0.999881566, -1.03885048e-22, -0.0153914848,
            1.07805858e-22, 1, 2.53909284e-22,
            0.0153914848, -2.55538502e-22, 0.999881566
            )) > 10 then
        alert("tween to")
            TweenController.Create(
                CFrame.new(
                    -1837.46155, 44.2921753, 1656.1987, 
                    0.999881566, -1.03885048e-22, -0.0153914848,
                    1.07805858e-22, 1, 2.53909284e-22,
                    0.0153914848, -2.55538502e-22, 0.999881566
                )
            )            
        else
            LocalPlayer = game.Players.LocalPlayer
            LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-1836, 11, 1714)
            alert("1")
            task.wait(.5)
            LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-1850.49329, 13.1789551, 1750.89685)
            alert("2")
            task.wait(1)
            LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-1858.87305, 19.3777466, 1712.01807)
            alert("3")
            task.wait(1)
            LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-1803.94324, 16.5789185, 1750.89685)
            task.wait(1)
            alert("4")
            LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-1858.55835, 16.8604317, 1724.79541)
            task.wait(1)
            alert("5")
            LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-1869.54224, 15.987854, 1681.00659)
            task.wait(1)
            alert("6")
            LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-1800.0979, 16.4978027, 1684.52368)
            task.wait(1)
            alert("7")
            LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-1819.26343, 14.795166, 1717.90625)
            task.wait(1)
            alert("8")
            LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-1813.51843, 14.8604736, 1724.79541)
        end
        end
    end) 


    -- Race v2 

    FunctionsHandler.EvoRace:RegisterMethod("Refresh", function() 
        
        if not Config.Items.RaceV2 then return end 
        if SeaIndex ~= 2 then return end 
        if getsenv(game.ReplicatedStorage.GuideModule)._G.ServerData.ExpBoost ~= 0 or ScriptStorage.PlayerData.Level < 900 or ScriptStorage.PlayerData.Beli < 1000000 or ScriptStorage.PlayerData.RaceLevel ~= 1 then return end 
        return true 
    end) 

    FunctionsHandler.EvoRace:RegisterMethod("Start", function() 
        Remotes.CommF_:InvokeServer("Alchemist", "1")
        Remotes.CommF_:InvokeServer("Alchemist", "2")
        
        for i = 1,2,1 do 
            local Check1 = ScriptStorage.Tools["Flower " .. i]
            local Check2 = Services.Workspace:FindFirstChild("Flower" .. i) 
            
            
            if not Check1 then
            
                if Check2 and Check2.Transparency == 0 then 
                
                    SetTask("MainTask", "Auto Race V2 - Collecting Flower " .. i)
                    while not ScriptStorage.Tools["Flower " .. i] do 
                        task.wait() 
                        TweenController.Create(Check2.CFrame + Vector3.new(0, math.random(-1,2), 0)) 
                    end
                end
            end 
        end 
        
        if not ScriptStorage.Tools["Flower 3"] then 
            SetTask("MainTask", "Auto Race V2 - Collecting Flower " .. 3)
            CombatController.Attack("Swan Pirate")
            
        else 
            
            SetTask("MainTask", "Auto Race V2 - Idling")
            if LocalPlayer.Character.HumanoidRootPart.CFrame.Y < 50000 then 
                TweenController.Create(LocalPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(0, 50, 0)) 
            end 
            
            Remotes.CommF_:InvokeServer("Alchemist", "3")
            RefreshRace()
        end
    end) 

    -- BossesTask 


    FunctionsHandler.BossesTask:RegisterMethod("Refresh", function() 
        
        local Boss
        for _, BossName in BossesOrder do
            
            local LevelReq = BossesOrderLevel[BossName]
            
            if ScriptStorage.PlayerData.Level >= LevelReq then
                local Result = ScriptStorage.Enemies[BossName] 
                if Result and Result:FindFirstChild("Humanoid") and Result.Humanoid.Health > 0 then 
                    Boss = Result 
                end 
            end 
        end
        
        if Boss and ( CaculateDistance(Boss.HumanoidRootPart.CFrame) < (SeaIndex == 2 and 3000 or 5000 ) or BossesOrderWL[tostring(Boss)] or ScriptStorage.PlayerData.Level == MaxLevel)  then
            return Boss
        end
    end) 

    FunctionsHandler.BossesTask:RegisterMethod("Start", function(Boss) 

        if Boss then 
            
            SetTask("MainTask", "Auto Farm Boss - Defeating " .. Boss.Name)
            
            CombatController.Attack(tostring(Boss), null, null, function() SpecialItems = nil end)
            
            SpecialItems = nil
        end 
    end) 


    FunctionsHandler.SpecialBossesTask:RegisterMethod("Refresh", function() 
    local Boss2
    
        for BossName, LevelReq in SpecialBossesOrder do
            if ScriptStorage.PlayerData.Level >= LevelReq then
                local Result = ScriptStorage.Enemies[BossName] 
                if Result and Result:FindFirstChild("Humanoid") and Result.Humanoid.Health > 0 then 
                
                    Boss2 = Result 
                end 
            end 
        end 
        return Boss2
    end) 

    FunctionsHandler.SpecialBossesTask:RegisterMethod("Start", function(Boss) 
        
        if FunctionsHandler.RaidController.Methods.GetCurrentRaidIsland:Call() then 
            pcall(function() 
                LocalPlayer.Character.Humanoid.Health = 0
            end) 
        end 
        
        if Boss then 
            
            SetTask("MainTask", "Auto Farm Boss - Defeating " .. Boss.Name)
            CombatController.Attack(tostring(Boss))
        end 
    end) 

    -- RaidController


    FunctionsHandler.RaidController:RegisterMethod("RefreshRaidType", function() 
        for _, Raid in require(game.ReplicatedStorage.Raids).raids do 
            if string.find(ScriptStorage.PlayerData.DevilFruit, Raid) then 
                FunctionsHandler.RaidController:Set("CurrentChip", Raid)
                return 
            end 
        end 
        FunctionsHandler.RaidController:Set("CurrentChip", "Flame")
    end)

    FunctionsHandler.RaidController:RegisterMethod("GetRaidableFruit", function() 
        for _, Fruit in ScriptStorage.Backpack do 
            
            if string.find(FruitIdToName(Fruit.Name), " Fruit") then 
                if Fruit.Value and Fruit.Value < 1000000 then 
                
                    return Fruit
                end 
            end 
        end 
    end)

    FunctionsHandler.RaidController:RegisterMethod("GetCurrentRaidIsland", function() 
        PlayerPosition = LocalPlayer.Character.HumanoidRootPart.CFrame 
        IslandsList = {{}, {}, {}, {}, {}} 
        
        for _, Island in workspace["_WorldOrigin"].Locations:GetChildren() do 
            if string.find(Island.Name, "Island ") and CaculateDistance(Island.Position, Vector3.new(0,0,0)) > 7000 then 
                (function()
                    
                    local IslandIndex = string.gsub(Island.Name, "Island ", "") 
                    local IslandIndex = tonumber(IslandIndex)
                    table.insert(IslandsList[IslandIndex], Island)
                    
                end)()
            end 
        end
        
        if true then 
            
            
            for Index = 5,1,-1 do 
                
                for _, Island in IslandsList[Index] do 
                    
                    if CaculateDistance(Island.Position) < 2000 then 
                        
                        return Island
                    end 
                end 
            end 
        end 
    end)

    function CheckSpecialMicrochip() 
        for _, v in { LocalPlayer.Character:GetChildren(), LocalPlayer.Backpack:GetChildren() } do
            for _, v2 in v do 
                if v.Name == 'Special Microchip' then 
                    return v
                end 
            end 
        end 
    end 
    FunctionsHandler.RaidController:RegisterMethod("Refresh", function() 
        local Level = ScriptStorage.PlayerData.Level
        local Fragments = ScriptStorage.PlayerData.Fragments
        if Level < 1300 or SeaIndex == 1 then return end
        if Level < 1500 and Fragments > 2000 then return end
        if Level < MaxLevel then 
            if Fragments > 5000 then return end 
        else 
            if Fragments < 15000 then return end
        end 
        local RaidFruit = FunctionsHandler.RaidController.Methods.GetRaidableFruit:Call() 
        
        if RaidFruit then
            FunctionsHandler.RaidController:Set("CurrentProgressLevel", RaidFruit)
        end 
        return RaidFruit or FunctionsHandler.RaidController.Methods.GetCurrentRaidIsland:Call() or CheckSpecialMicrochip()
    end)

    FunctionsHandler.RaidController:RegisterMethod("Start", function()
        
        if not FunctionsHandler.RaidController:Get("CurrentChip") then 
            FunctionsHandler.RaidController.Methods.RefreshRaidType:Call() 
        end 
        
        local CurrentIsland = FunctionsHandler.RaidController.Methods.GetCurrentRaidIsland:Call() 
        RefreshInventory()
        
        FunctionsHandler.RaidController:Set("CurrentProgressLevel", nil) 
        
        if not CurrentIsland then 
            
            
            SetTask("MainTask", "Auto Raid - Buying Chip - " .. FunctionsHandler.RaidController:Get("CurrentChip")) 
            
            if not ScriptStorage.Tools["Special Microchip"] then 
                local cRaidFruit = FunctionsHandler.RaidController.Methods.GetRaidableFruit:Call()  
                
                table.insert(ScriptStorage.IgnoreStoreFruits, cRaidFruit.Name) 
                alert("Load Fruit", cRaidFruit.Name)
                Remotes.CommF_:InvokeServer("LoadFruit", cRaidFruit.Name)
                Remotes.CommF_:InvokeServer( "RaidsNpc", "Select", FunctionsHandler.RaidController:Get("CurrentChip"))
                task.wait(2)
            end 
            
            local RootRaidIsland = ({nil, "CircleIsland", "Boat Castle"})[SeaIndex]
            FunctionsHandler.LocalPlayerController.Methods.EquipTool:Call("Special Microchip")
            
            if not workspace.Map:FindFirstChild(RootRaidIsland) and not workspace:FindFirstChild(RootRaidIsland) then 
                task.wait(1)
                return TweenController.Create(game:GetService("ReplicatedStorage").FakeIslands:FindFirstChild(RootRaidIsland):GetModelCFrame())
            end 
            
            if not workspace.Map:FindFirstChild(RootRaidIsland):FindFirstChild('RaidSummon2') then 
                task.wait(1)
                return TweenController.Create(workspace.Map:FindFirstChild(RootRaidIsland):GetModelCFrame())
            end 
            
            fireclickdetector((workspace.Map:FindFirstChild(RootRaidIsland) or workspace:FindFirstChild(RootRaidIsland)).RaidSummon2.Button.Main.ClickDetector)
            local RaidStartSenque = os.time() 
            SetTask("MainTask", "Auto Raid - Waiting Until Raid Is Started") 
            repeat task.wait() until os.time() - ( LastRaidAlert2 or 0 ) < 20 or os.time() - RaidStartSenque > 30 
            TweenController.Create(LocalPlayer.Character.HumanoidRootPart.CFrame)
            repeat task.wait() until os.time() - ( LastRaidAlert or 0 ) < 20  or os.time() - RaidStartSenque > 30 
            alert("Cyndral", "Tween Paused")
            task.wait(.5)
            if os.time() - RaidStartSenque > 30  then 
                SetTask("MainTask", "Auto Raid - Raid Is Not Stared?")
                Report("[ Raid Error ] Time Limit Reached")
            end 
            
            LastRaidAlert = 0 
        else 
            
            SetTask("MainTask", "Auto Raid - " .. CurrentIsland.Name .. " / 5")
            local Found = false 
            for _, Mon in GetMonAsSortedRange() do 
                
                local StartTick1 = os.time()
                while Mon and Mon:FindFirstChild("HumanoidRootPart") and Mon.Humanoid.Health > 0 and CaculateDistance(Mon.HumanoidRootPart.Position) < 1000 and os.time() - StartTick1 < 60 and task.wait(.05) do 
                    Found = true 
                    if string.find(Mon.Name, "Master") or true then 
                        CombatController.Attack(Mon.Name)
                        
                    else
                        pcall(sethiddenproperty, LocalPlayer, "SimulationRadius", math.huge)
                        pcall(function()
                            Mon.HumanoidRootPart.CanCollide = false
                            Mon.Humanoid.Health = 0
                            Mon:BreakJoints()
                        end)
                    end
                end 
            end
            
            if not Found then 
                TweenController.Create(CurrentIsland.Position + Vector3.new(0, 100, 0))
            end 
        end
    end)



    -- CollectDrops

    FunctionsHandler.CollectDrops:RegisterMethod('Refresh', function() 
        
        local FruitNames = {} 
        
        for i in ScriptStorage.Backpack do 
            FruitNames[FruitIdToName(i)] = i
        end
        
        for _, Fruit in workspace:GetChildren() do 
            if string.find(Fruit.Name, "Fruit") and not Players:FindFirstChild(Fruit.Name) and Fruit:FindFirstChild("Handle") and not FruitNames[tostring(Fruit)] and not ScriptStorage.Backpack[FruitNameToId(tostring(Fruit))] then 
                
                FunctionsHandler.CollectDrops:Set("CurrentProgressLevel", Fruit) 
                return Fruit
            end 
        end
        
    end)

    FunctionsHandler.CollectDrops:RegisterMethod('Start', function() 
        local Fruit = FunctionsHandler.CollectDrops:Get("CurrentProgressLevel")
        FunctionsHandler.CollectDrops:Set("CurrentProgressLevel", nil) 
        if Fruit then 
            SetTask("MainTask", "Auto Collect Drop Items - " .. tostring(Fruit)) 
            TweenController.Create(Fruit:GetModelCFrame()) 
        end 
    end)

    FunctionsHandler.UtillyItemsActivitation:RegisterMethod("Refresh", function()
        -- print(1)
        if os.time() - StartTime < 20 then return end 
        -- print(2)
        if not SpecialItems then 
            SpecialItems = {} 
            local RemoveList = {} 
            IceAdmiralPassed = true 
            
            if not ScriptStorage.Backpack.Rengoku then 
                table.insert(SpecialItems, "Hidden Key") 
                IceAdmiralPassed = false
            end 
            -- print(3)
            if SeaIndex == 2 and Services.Workspace.Map.IceCastle.Hall.LibraryDoor:FindFirstChild("PhoeyuDoor") then
                table.insert(SpecialItems, "Library Key") 
                IceAdmiralPassed = false 
            end
            -- print(4)

            if IceAdmiralPassed then 
                
                table.insert(RemoveList, "Awakened Ice Admiral") 
            end 
            -- print(5)
            local Response = not ScriptStorage.Melees["Sharkman Karate"] and Remotes.CommF_:InvokeServer("BuySharkmanKarate", true); 
            -- print(6)
            SharkmanPassed = typeof(Response) == "string"
        --   alert("SharkmanPassed", SharkmanPassed)
            if typeof(Response) == "string" then
                table.insert(SpecialItems, "Water Key") 
            else 
                TidePassed = true
                table.insert(RemoveList, "Tide Keeper")
            end 
            -- print(7)
            if ScriptStorage.Backpack.Yama then 
                print("Elite")
                table.insert(RemoveList, "Deandre")
                table.insert(RemoveList, "Urban")
                table.insert(RemoveList, "Diablo")
            end 
        -- print(8)
            local function GetResult() 
                
                local Result = {} 
                for _, Value in BossesOrder do
                    local Passed = true 
                    for _, Name2 in RemoveList do
                        if Name2 == Value then 
                            Passed = false
                        end 
                    end 
                    
                    if Passed then 
                        table.insert(Result, Value)
                    end 
                    
                end
                
                local n = #Result
                for i = 1, n - 1 do
                    for j = 1, n - i do
                        local a = key and tostring(Result[j][key]):lower() or tostring(Result[j]):lower()
                        local b = key and tostring(Result[j + 1][key]):lower() or tostring(Result[j + 1]):lower()
                        if a > b then
                            Result[j], Result[j + 1] = Result[j + 1], Result[j]
                        end
                    end
                end
                
                
                return Result
            end
            -- print(9)
            BossesOrder = GetResult()
            
            
            for ItemName, ItemData in DropItemData do 
                if not ScriptStorage.Backpack[ItemName] and SeaIndex == ItemData.Sea then
                    if ScriptStorage.PlayerData.Level >= ItemData.Level then 
                        BossesOrderLevel[ItemData.Boss] =  ItemData.Level
                        table.insert(BossesOrder, ItemData.Boss)
                    end 
                end 
            end 
            -- print(10)
            if FunctionsHandler.Trevor:Get("IsCompleted") and not Storage:Get("SwanDefeated") then
                print("Added Don Swan to boss orser list")
                BossesOrderLevel["Don Swan"] = 1100 
                table.insert(BossesOrder, "Don Swan")
                print(ScriptStorage.PlayerData.Level, ScriptStorage.Enemies["Don Swan"])
                if SeaIndex == 2 and ScriptStorage.PlayerData.Level > 1500 and not ScriptStorage.Enemies["Don Swan"] then 
                    
                    print("hop")
                    alert("Don Swan", "Hopping for don swan")
                    -- Hop("Hop for don swan")
                end 
            end 
        end
        -- print(11)
        for Index, Value in SpecialItems do 
            if ScriptStorage.Tools[Value] then 
                FunctionsHandler.UtillyItemsActivitation:Set("CurrentProgressLevel", Value)
                return Value 
            end 
        end 
        -- print(12)
        if SeaIndex == 3 and ( ScriptStorage.Melees["Death Step"] or 0 ) >= 400 and ( ScriptStorage.Melees["Black Leg"] or 0 ) >= 400 and ScriptStorage.PlayerData.Beli >= 2500000 and ScriptStorage.PlayerData.Fragments >= 5000 and not ScriptStorage.Melees["Electric Claw"] then 
            FunctionsHandler.UtillyItemsActivitation:Set("CurrentProgressLevel", "Previous Hero")
            return "Previous Hero"
        end 
        -- print(13)
        if ScriptStorage.Tools["Red Key"] then 
            FunctionsHandler.UtillyItemsActivitation:Set("CurrentProgressLevel", "Red Key")
            return "Red Key"
        end 
        -- print(14)
        if ScriptStorage.Tools["Hallow Essence"] then 
            FunctionsHandler.UtillyItemsActivitation:Set("CurrentProgressLevel", "Soul Reaper Spawner")
            FunctionsHandler.LocalPlayerController.Methods.EquipTool:Call("Hallow Essence")
            return "Soul Reaper Spawner"
        end 
        -- print(15)
        if ScriptStorage.Tools["Fire Essence"] then 
            FunctionsHandler.UtillyItemsActivitation:Set("CurrentProgressLevel", "Uzoth")
            
            return "Uzoth"
        end 
        -- print(16)
    end)

    FunctionsHandler.UtillyItemsActivitation:RegisterMethod("Start", function() 
        
        local Type = FunctionsHandler.UtillyItemsActivitation:Get("CurrentProgressLevel")
        if Type == "Hidden Key" then 
            Remotes.CommF_:InvokeServer("OpenRengoku")
        elseif Type == "Water Key" then 
            FunctionsHandler.LocalPlayerController.Methods.EquipTool:Call("Water Key")
            Remotes.CommF_:InvokeServer("BuySharkmanKarate", true)
            Remotes.CommF_:InvokeServer("BuySharkmanKarate")
        elseif Type == "Library Key" then 
            Remotes.CommF_:InvokeServer("OpenLibrary")Services.Workspace.Map.IceCastle.Hall.LibraryDoor:FindFirstChild("PhoeyuDoor"):Destroy()
        elseif Type == "Red Key" then 
            alert("Red key", "Sumbitting red key to the scienctist.")
            Remotes.CommF_:InvokeServer("CakeScientist", "Check")
            ScriptStorage.Tools["Red Key"]:Destroy()
        elseif Type == "Previous Hero" then 
            Remotes.CommF_:InvokeServer("BuyElectricClaw", "Start")
            task.wait(3)
            repeat
                task.wait()
                TweenController.Create(CFrame.new(-12548, 332.378 + math.random(-2, 2), -7617))
            until CaculateDistance(CFrame.new(-12548, 332.378, -7617)) < 30
            
            Remotes.CommF_:InvokeServer("BuyElectricClaw")
            FunctionsHandler.LocalPlayerController.Methods.EquipTool:Call("Melee")
        elseif Type == "Uzoth" then 
            
            print("Use Fire Essence")
            Remotes.CommF_:InvokeServer("BuyDragonTalon", true)
            Remotes.CommF_:InvokeServer("BuyDragonTalon")
            IsFireEssenceGave = true 
            Report('Fire Essence Used')
            
        elseif Type == "Soul Reaper Spawner" then 
            
            print("Use Hallow Essence")
            
            if CaculateDistance(workspace.Map["Haunted Castle"].Summoner.Detection.CFrame) < 100 then 
                SpecialItems = nil
            end 
            
            TweenController.Create(workspace.Map["Haunted Castle"].Summoner.Detection.CFrame)
        
        end
        
    end)

    -- Trevor 

    FunctionsHandler.Trevor:RegisterMethod("GetFruit", function() 
        for _, Fruit in ScriptStorage.Backpack do
            if string.find(FruitIdToName(Fruit.Name), " Fruit") then 
                if Fruit.Value and Fruit.Value > 1000000 then 
                
                    return Fruit
                end 
            end 
        end 
    end) 

    FunctionsHandler.Trevor:RegisterMethod("Refresh", function() 
        if FunctionsHandler.Trevor:Get("IsCompleted")  or os.time() - StartTime < 1 then return end 
        
        if ScriptStorage.PlayerData.Level < 1100 then return end 
        

        local Fruit = FunctionsHandler.Trevor.Methods.GetFruit:Call()
        
        if Fruit then 
            
            FunctionsHandler.Trevor:Set("Fruit", Fruit)
        end
        
        TrevorDebounce = os.time() 
        

        if not FunctionsHandler.Trevor:Get("IsCompleted") then
            print("Update IsCompleted")
            FunctionsHandler.Trevor:Set("IsCompleted", ((Remotes.CommF_:InvokeServer("TalkTrevor", "1") == 0))) 
            print("Update IsCompleted", FunctionsHandler.Trevor:Get("IsCompleted"), Remotes.CommF_:InvokeServer("TalkTrevor", "1"), Remotes.CommF_:InvokeServer("TalkTrevor", "1") == 0 )
        end
        
        return not FunctionsHandler.Trevor:Get("IsCompleted") and Fruit
    end) 

    FunctionsHandler.Trevor:RegisterMethod("Start", function() 
        
        alert("[ Cyndral ]", "Pulling fruit for trevor...")
        local Fruit = FunctionsHandler.Trevor:Get("Fruit") 
        FunctionsHandler.Trevor:Set("Fruit", nil) 
        table.insert(ScriptStorage.IgnoreStoreFruits, Fruit.Name) 
        Remotes.CommF_:InvokeServer("LoadFruit", Fruit.Name)
        task.wait()
        FunctionsHandler.LocalPlayerController.Methods.EquipTool:Call(FruitIdToName(Fruit.Name))
        
        Remotes.CommF_:InvokeServer("TalkTrevor", "1")

        Remotes.CommF_:InvokeServer("TalkTrevor", "2")

        Remotes.CommF_:InvokeServer("TalkTrevor", "3")
        
        task.wait(1)
        FunctionsHandler.Trevor:Set("IsCompleted", true) 
    end)

    print(4)
    -- Third Sea Puzzle 
    FunctionsHandler.ThirdSeaPuzzle:RegisterMethod("Refresh", function() 
        
        if ScriptStorage.PlayerData.Level < 1500 or SeaIndex ~= 2 then
            return 
        end 
        
        
        
        if nil == FunctionsHandler.ThirdSeaPuzzle:Get("State") then 
            
            ZQuestProgress = Remotes.CommF_:InvokeServer("ZQuestProgress", "Check")
            print("ZQuestProgress", ZQuestProgress)
            FunctionsHandler.ThirdSeaPuzzle:Set("State", ZQuestProgress == 0)
        end  
        
        return FunctionsHandler.ThirdSeaPuzzle:Get("State")
    end) 

    FunctionsHandler.ThirdSeaPuzzle:RegisterMethod("Start", function() 
        local State = FunctionsHandler.ThirdSeaPuzzle:Get("State") 
        
        alert("1093", "start")
        if State then 
            alert("1095", "case test")
            repeat task.wait(1) 
                alert("1096", "fire")
                print("StartResponse", Remotes.CommF_:InvokeServer("ZQuestProgress", "Begin")) 
            until CaculateDistance(Vector3.new(0,0,0)) > 20000 
            
            task.spawn(function() 
                alert("1102", "rejoin")
                task.wait(30)
                LocalPlayer:Kick()
            end) 
            
            alert("attack")
            while task.wait() do 
                CombatController.Attack("rip_indra")
            end 
            
        end 
    end)


    FunctionsHandler.Yama:RegisterMethod("Refresh", function() 
        if SeaIndex ~= 3 then return end 
        
        if ScriptStorage.Backpack.Yama then return end 
        
        if not FunctionsHandler.Yama:Get("EliteCount") then 
            FunctionsHandler.Yama:Set("EliteCount", Remotes.CommF_:InvokeServer("EliteHunter", "Progress")) 
        end 
        
        if FunctionsHandler.Yama:Get("EliteCount") >= 30 then 
            return true
        end 
    end)

    FunctionsHandler.Yama:RegisterMethod("Start", function() 
        if not workspace.Map:FindFirstChild('Waterfall') and not workspace.Map.Waterfall:FindFirstChild("SealedKatana")  then
            LocalPlayer:Kick()
            return 
        end
        fireclickdetector(workspace.Map.Waterfall.SealedKatana.Hitbox.ClickDetector)
    end)

    FunctionsHandler.PirateRaid:RegisterMethod("Refresh", function() 
        local Senque = FunctionsHandler.PirateRaid:Get("Senque") 
        
        return Senque and os.time() - Senque < 500
    end)

    FunctionsHandler.PirateRaid:RegisterMethod("Start", function() 
        local NearestMon = GetMonAsSortedRange()
        
        local SeaCastlePosition = Vector3.new(-5543.5327148438, 313.80062866211, -2964.2585449219) 
        
        if NearestMon[1] then 
            local MonHumanoid, MonHumanoidRootPart = NearestMon[1]:FindFirstChild("Humanoid"), NearestMon[1]:FindFirstChild("HumanoidRootPart")
            
            if MonHumanoidRootPart and MonHumanoid and MonHumanoid.Health > 0 and CaculateDistance(MonHumanoidRootPart.CFrame, SeaCastlePosition) < 500 then 
                CombatController.Attack(NearestMon[1].Name)
                return 
            end
        end 
        
        TweenController.Create(SeaCastlePosition)
    end)

    -- Soul guitar 

    function CheckFullMoon(NightForce)

        if Lighting.Sky.MoonTextureId ~= "http://www.roblox.com/asset/?id=9709149431" then

            return
        elseif NightForce then
            return true
        end
        return Lighting.ClockTime > 18 or Lighting.ClockTime < 5
    end

    FunctionsHandler.SoulGuitar:RegisterMethod("Refresh", function() 
        
        if not Config.Items.SoulGuitar then return end 
        
        if ScriptStorage.Backpack["Skull Guitar"] or not ScriptStorage.Backpack["Dark Fragment"] then 
            return 
        end 
        
        
        if ScriptStorage.PlayerData.Level < 2300 then return end 
        
        local EctoplasmCount = ( ScriptStorage.Backpack["Ectoplasm"] or { Count = 0 } )["Count"] 
        local BonesCount = ( ScriptStorage.Backpack["Bones"] or { Count = 0 } )["Count"] 
        
        if EctoplasmCount < 250 then 
            return 1 
        end 
        
        if SeaIndex ~= 3 then 
            return 
        end 
        
        SoulGuitarProcess = Remotes.CommF_:InvokeServer("GuitarPuzzleProgress", "Check")
        
        if not SoulGuitarProcess then  
        Remotes.CommF_:InvokeServer("gravestoneEvent", 2)
            if not CheckFullMoon() then 
                SetTask("MainTask", "Hopping for full moon ( soul guitar )")
                WrapToServer("Moon")
            end 
            return 7
        end 
        
        if not SoulGuitarProcess.Swamp then 
            return 2 
        elseif not SoulGuitarProcess.Gravestones then 
            return 3 
        elseif not SoulGuitarProcess.Ghost then 
            return 4 
        elseif not SoulGuitarProcess.Trophies then 
            return 5 
        elseif not SoulGuitarProcess.Pipes then 
            return 6
        elseif BonesCount >= 500 and not ScriptStorage.Backpack["Skull Guitar"] then 
            return 8
        end 
    end) 

    FunctionsHandler.SoulGuitar:RegisterMethod("Start", function(State) 
        if State == 7 then 
            while CaculateDistance(CFrame.new(-8654, 140, 6167)) > 5 do

                task.wait()

                TweenController.Create(CFrame.new(-8654, 140, 6167))
            end
            SoulGuitarProcess = Remotes.CommF_:InvokeServer("gravestoneEvent", 2, true)
        elseif State == 1 then 
            if SeaIndex ~= 2 then 
                SetTask("MainTask", "Teleport to second sea to farm ectoplasm")
                return Remotes.CommF_:InvokeServer("TravelDressrosa")
            else 
                SetTask("MainTask", "Farming ectoplasms for soul guitar")
                CombatController.Attack({"Ship Deckhand","Ship Engineer", "Ship Steward","Ship Officer"})
                return
            end 
        elseif State == 2 then 
            
            TTL9 = TTL9 or 0 
            if os.time() ~= LastestTime1 then
                TTL9 = TTL9 + 1 
                LastestTime1 = os.time() 
            end 
            
            if TTL9 > 60 then 
                -- return Hop("LOMGGGGGGGG SG 1")
            end
            
            local Objects = {} 
            
            for _, Entity in Services.Workspace.Enemies:GetChildren() do 
                if Entity.name == "Living Zombie" then 
                    table.insert(Objects, Entity)
                end 
            end 
            
            if #Objects < 6 then 
                SetTask('MainTask', "Soul Guitar task 1 / 5: waiting until entity spawn") 
                TweenController.Create(ScriptStorage.MobRegions["Living Zombie"][1] + Vector3.new(0,30,0))
                
            else 
                
                local StartTime19 = os.time()
                for Idx, Object in Objects do 
                    while task.wait() and Object.Humanoid.Health > 7000 do
                        SetTask('MainTask', "Soul Guitar task 1 / 5: Hit mob " .. Idx .. " / 6" ) 
                        FunctionsHandler.LocalPlayerController.Methods.EquipTool:Call("Melee")
                        if os.time() - StartTime19 > 60 then 
                            -- Hop("So long nerds")
                        end 
                        
                        TweenController.Create(Object.HumanoidRootPart.CFrame + Vector3.new(0,50,0)) 
                        AttackController:Attack() 
                    end 
                end
                SetTask('MainTask', "Soul Guitar task 1 / 5: Attack") 
                while workspace.Enemies:FindFirstChild("Living Zombie") and task.wait() do 
                    if os.time() - StartTime19 > 60 then 
                            -- Hop("So long nerds")
                        end 
                        
                    CombatController.Attack("Living Zombie")
                end 
            end 
        elseif State == 3 then 
            local HauntedIsland = workspace.Map["Haunted Castle"] 
            while CaculateDistance(CFrame.new(-8800, 178, 6033)) > 10 do
                task.wait()
                SetTask("MainTask", "Soul Guitar task 2 / 5: completing placards")
                TweenController.Create(CFrame.new(-8800, 178, 6033))
            end
            
            for Placard, Side in {

                Placard1 = "Right",

                Placard2 = "Right",
                Placard3 = "Left",
                Placard4 = "Right",
                Placard5 = "Left",
                Placard6 = "Left",
                Placard7 = "Left"
            } do
                fireclickdetector(HauntedIsland[Placard][Side].ClickDetector)
            end
        elseif State == 4 then 
            Remotes.CommF_:InvokeServer( "GuitarPuzzleProgress", "Ghost")
        elseif State == 5 then 
            if CaculateDistance(CFrame.new(-9530.0126953125, 6.104853630065918, 6054.83349609375)) > 30 then
                TweenController.Create(CFrame.new(-9530.0126953125, 6.104853630065918, 6054.83349609375))
            else
                local DepTraiv4 = workspace.Map["Haunted Castle"].Tablet
                for i, v in pairs(BlankTablets) do
                    local x = DepTraiv4[v]
                    if x.Line.Rotation.Z ~= 0 then
                        repeat
                            task.wait()
                            fireclickdetector(x.ClickDetector)
                        until x.Line.Rotation.Z == 0
                    end
                end
                for i, v in pairs(Trophy) do
                    local x = workspace.Map["Haunted Castle"].Trophies.Quest[v].Handle.CFrame
                    x = tostring(x)
                    x = x:split(", ")[4]
                    local c = "180"
                    if x == "1" or x == "-1" then
                        c = "90"
                    end
                    if not string.find(tostring(DepTraiv4[i].Line.Rotation.Z), c) then
                        repeat
                            task.wait()
                            fireclickdetector(DepTraiv4[i].ClickDetector)
                        until string.find(tostring(DepTraiv4[i].Line.Rotation.Z), c)
                    end
                end
            end
        elseif State == 6 then 
            for i, v in pairs(Pipes) do

                pcall(

                    function()
                        local x = workspace.Map["Haunted Castle"]["Lab Puzzle"].ColorFloor.Model[i]
                        if x.BrickColor.Name ~= v then
                            repeat
                                task.wait()
                                fireclickdetector(x.ClickDetector)
                            until x.BrickColor.Name == v
                        end
                    end
                )
            end
            Remotes.CommF_:InvokeServer("soulGuitarBuy")
        elseif State == 8 then 
            Remotes.CommF_:InvokeServer("soulGuitarBuy")
            
        end
    end)

    FunctionsHandler.Tushita:RegisterMethod("Refresh", function() 
        if ScriptStorage.Backpack.Tushita then return end 
        
        
        if ScriptStorage.PlayerData.Level < 2000 then return end 
        
        if SeaIndex ~= 3 then return end 
        
        
        TushitaProgress = TushitaProgress or Remotes.CommF_:InvokeServer("TushitaProgress")
        
        if not TushitaProgress.OpenedDoor then 
            
            if ScriptStorage.Enemies["rip_indra True Form"] then 
                TushitaProgress = nil
                return 1
            end 
        else
            if ScriptStorage.Enemies["Longma"] then 
                TushitaProgress = nil
                return 2 
            end 
        end
        
    end)

    FunctionsHandler.Tushita:RegisterMethod("Start", function(State) 
        if State == 1 then
            alert("Auto Tushita", "Placing torches...")
            if not ScriptStorage.Tools["Holy Torch"] then
                FunctionsHandler.LocalPlayerController.Methods.EquipTool:Call("Holy Torch")
                TweenController.Create(CFrame.new(5714, math.random(19,21), 256)) -- Portal position
                return
            end 
            
            local TurtleMap = workspace.Map.Turtle.QuestTorches
            
            for TorchIndex = 1, 5, 1 do

                if TurtleMap:FindFirstChild("Torch" .. TorchIndex) then

                    repeat
                        task.wait()
                        TweenController.Create(TurtleMap:FindFirstChild("Torch" .. TorchIndex).CFrame)
                    until TurtleMap:FindFirstChild("Torch" .. TorchIndex).Particles.Main.Enabled
                end
            end
        
        elseif State == 2 then 
            alert("Auto Tushita", "Defeating Longma")
            CombatController.Attack("Longma")
        end 
    end)



    FunctionsHandler.CursedDualKatana:RegisterMethod("Refresh", function() 
       if ScriptStorage.PlayerData.Level < 2200 then return end 
            local Backpack = ScriptStorage.Backpack
            
            if false  
                or Backpack['Cursed Dual Katana']
                
                or not Backpack.Yama 
                or Backpack.Yama.Mastery < 350 
                
                or not Backpack.Tushita 
                or Backpack.Tushita.Mastery < 350 
                
                or SeaIndex ~= 3 
            then 
                return 
            end 
            
            local CDKProgess = CDKProgess or Remotes.CommF_:InvokeServer('CDKQuest', 'Progress') or 'uwu'
            
            if not CDKProgess or CDKProgess == 'uwu' then return end 
            if not workspace.Map:FindFirstChild('Turtle') or not workspace.Map.Turtle:FindFirstChild'Cursed' then 
                TweenController.Create(workspace.Turtle:GetModelCFrame())
                return true
            end 
            
            if workspace.Map.Turtle.Cursed:FindFirstChild('Breakable') then
                return { 'break' }
            end
            
            local ScrollSides = {
                Good = 'Tushita', 
                Evil = 'Yama'
            }
            
            if CDKProgess.Good == 4 and CDKProgess.Evil == 4 then
                return { 'burn 2' } 
            end 
            
            if CDKProgess.Good == 3 or CDKProgess.Evil == 3 then 
                return { 'burn' } 
            end 
            
            if CDKProgess.Opened then 
                for Index, Value in CDKProgess do
                    if Index ~= 'Opened' and Index ~= 'Finished' and Value < 3 then 
                        
                        ScriptStorage.CDKCache = {
                            Index, 
                            Value + 1
                        }
                        
                        if not ScriptStorage.Tools[ScrollSides[Index]] then 
                            Remotes.CommF_:InvokeServer('LoadItem', ScrollSides[Index])
                        end 
                        
                        Remotes.CommF_:InvokeServer('CDKQuest', 'StartTrial', Index)
                        return false 
                    end 
                end
            end 
            
            local CachedValue = ScriptStorage.CDKCache 
            
            if not CachedValue then return end 
            
            local Name, Level = CachedValue[1], CachedValue[2] 
            
            if Name == 'Evil' and Level == 3 then 
                if not ScriptStorage.Enemies['Soul Reaper'] then 
                    WrapToServer('Rare Boss', function(Child) return Child['Rare Boss'] == 'Soul Reaper' end)
                    return
                end 
            elseif Name == 'Good' then 
                if Level == 3 and not ScriptStorage.Enemies['Cake Queen'] then 
                    -- Hop('Find cake queen')
                    return 
                end 
            end
            return CachedValue
        end)

    FunctionsHandler.CursedDualKatana:RegisterMethod("GetHazeMon", function() 
        
        local Positions = {} 
        for _, Inst in LocalPlayer.QuestHaze:GetChildren() do 
            if Inst.Value > 0 then 
                table.insert(Positions, Inst) 
            end 
        end 
        table.sort(Positions, function(C1, C2) return CaculateDistance(C1:GetAttribute("Position")) < CaculateDistance(C2:GetAttribute("Position")) end) 
        return tostring(Positions[1])
    end)

    FunctionsHandler.CursedDualKatana:RegisterMethod("DoDimension", function(DimensionName)  
        local DimensionId = string.gsub(DimensionName, " ", "") 
        
        local VaiCaNgu1234 = os.time()
        repeat task.wait()
            TweenController.Create(LocalPlayer.Character.HumanoidRootPart.CFrame)
            if os.time() - VaiCaNgu1234 > 60 then 
                return 
            end 
        until os.time() - TorchEnabledTime < 10 
        
        repeat task.wait() 
            local OriginalIsland = workspace.Map:WaitForChild(DimensionId, 10)
            if OriginalIsland then 
                
                for _, Torch in OriginalIsland:GetChildren() do 
                    if Torch and string.find(Torch.Name, "Torch") and Torch:FindFirstChild("ProximityPrompt") and Torch.ProximityPrompt.Enabled then 
                        LocalPlayer.Character.HumanoidRootPart.CFrame = Torch.CFrame 
                        
                        Torch.ProximityPrompt.HoldDuration = 0
                        task.wait(1)
                        local vim = game:GetService("VirtualInputManager")
                        vim:SendKeyEvent(true, "E", 0, game)    -- e vã lắm r T_T
                        vim:SendKeyEvent(false, "E", 0, game)    -- e vã lắm r T_T
                    
                        
                        fireproximityprompt(workspace.Map:WaitForChild(DimensionId, 10):FindFirstChild(tostring(Torch)).ProximityPrompt) 
                    
                    end 
                    for _, Mon in workspace.Enemies:GetChildren() do 
                        local MonHumanoidRootPart = Mon:FindFirstChild("HumanoidRootPart") 
                        local MonHumanoid = Mon:FindFirstChild("Humanoid") 
                        
                        if MonHumanoidRootPart and MonHumanoid and CaculateDistance(MonHumanoidRootPart.CFrame) < 1000 then 
                            
                            CombatController.Attack(Mon.Name)
                        end 
                    end
                end 
                ExitDoor = OriginalIsland:FindFirstChild("Exit") 
                print("exit door", ExitDoor)
                if ExitDoor then 
                    PortalBrick = tostring(ExitDoor.BrickColor)
                    print("Brick color", ExitDoor, ExitDoor.BrickColor, PortalBrick)
                end 
            else 
                print("no island idk wt-")
            end
            print("loop damn", PortalBrick)
        until PortalBrick == "Olivine" or PortalBrick == "Cloudy grey" 
        print("leave")
        while os.time() - DoneCdkTick > 15 do 
            TweenController.Create(ExitDoor.CFrame + Vector3.new(0, math.random(1,5), 0)) 
            task.wait() 
        end 
        
        -- Hop("Rejoin")
    end) 

    FunctionsHandler.CursedDualKatana:RegisterMethod("Start", function(CachedData) 
        if type(CachedData) ~= 'table' then return end 
            if not workspace.Map:FindFirstChild('Turtle') or not workspace.Map.Turtle:FindFirstChild('Cursed') then return end
            local CursedTemple = workspace.Map.Turtle.Cursed
            if CachedData[1] == 'break' then 
                TweenController:Create(workspace.Map.Turtle.Cursed.Breakable.CFrame)
                Remotes.CommF_:InvokeServer('CDKQuest', 'OpenDoor')
                Remotes.CommF_:InvokeServer('CDKQuest', 'OpenDoor', true)
                workspace.Map.Turtle.Cursed.Breakable:Destroy()
                CDKProgess = nil  
                return true
            end 
            if CachedData[1] == 'burn 2' then
                if workspace.Map.Turtle.Cursed.Pedestal3.ProximityPrompt.Enabled then 
                    fireproximityprompt(workspace.Map.Turtle.Cursed.Pedestal3.ProximityPrompt)
                    task.wait(1) 
                    pcall(function() 
                        LocalPlayer.Character.Humanoid.Health = 0
                    end)
                    task.wait(10)
                else
                    CDKAttempts = ( CDKAttempts or 0 ) + 1
                    TweenController:Create(CFrame.new(-12341.66796875, 603.3455810546875, -6550.6064453125)) 
                    task.wait(5) 
                    
                    pcall(function() 
                        LocalPlayer.Character.Humanoid.Health = 0
                    end)
                    task.wait(5)
                    if CDKAttempts > 5 then 
                        -- Hop('CDK Stuck')
                    end
                    
                    CDKProgess = nil  
                end
            elseif CachedData[1] == 'burn' then 
                for Index = 1, 3, 1 do
                    local Pedestal = workspace.Map.Turtle.Cursed:FindFirstChild('Pedestal' .. Index) 
                    
                    if workspace.Map.Turtle.Cursed:FindFirstChild('Pedestal' .. Index) .ProximityPrompt.Enabled then 
                        repeat task.wait() 
                            TweenController.Create(workspace.Map.Turtle.Cursed:FindFirstChild('Pedestal' .. Index) .CFrame) 
                        until CaculateDistance(workspace.Map.Turtle.Cursed:FindFirstChild('Pedestal' .. Index) .CFrame) < 5
                        
                        fireproximityprompt(workspace.Map.Turtle.Cursed:FindFirstChild('Pedestal' .. Index) .ProximityPrompt) -- địt mẹ delta
                        task.wait(3) 
                        pcall(function() 
                            LocalPlayer.Character.Humanoid.Health = 0
                        end) 
                    end 
                    CDKProgess = nil  
                end 
                
            elseif CachedData[1] == 'Evil' then 
                if CachedData[2] == 1 then 
                    local Mob = ScriptStorage.Enemies['Forest Pirate'] 
                    
                    TweenController.Create((Mob and Mob.HumanoidRootPart.CFrame) or CFrame.new(-13345, 332, -7630))
                    CDKProgess = nil  
                elseif CachedData[2] == 2 then 
                    local Hazed = (GetHazedMobs())
                    AttackMob(tostring(Hazed))
                    CDKProgess = nil  
                elseif CachedData[2] == 3 then 
                    print('found CDK yama 3')
                    while not ( os.time() - TorchEnabledTime < 100 or not ScriptStorage.Enemies['Soul Reaper'] )  do
                        print('tweening to soul reaper ')
                        task.wait()
                        TweenController.Create(ScriptStorage.Enemies['Soul Reaper']:GetModelCFrame())
                        EquipTool(ForcedWeapon)
                        Services.VirtualUser:CaptureController() 
                        Services.VirtualUser:ClickButton2(Vector2.new())
                        
                    end  
                    if not ScriptStorage.Enemies['Soul Reaper'] then return end
                    CompleteDimension'Hell Dimension'
                    CDKProgess = nil  
                end 
            else
                if CachedData[2] == 1 then 
                    for _, NPC in game.ReplicatedStorage.NPCs:GetChildren() do 
                        if NPC.Name == 'Luxury Boat Dealer' then 
                            repeat task.wait() 
                                if os.time() - DoneCDKTick < 15 then return end
                                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = (NPC:GetModelCFrame()) 
                                RealNPC = nil
                                for _, npc in workspace.NPCs:GetChildren() do 
                                    if CaculateDistance(npc:GetModelCFrame(), NPC:GetModelCFrame()) < 20 then 
                                        RealNPC = npc 
                                        break
                                    end 
                                end 
                            until CaculateDistance(NPC:GetModelCFrame()) < 5 and RealNPC 
                            
                            Remotes.CommF_:InvokeServer('CDKQuest', 'BoatQuest', RealNPC) 
                        end
                    end
                    CDKProgess = nil  
                elseif CachedData[2] == 2 then 
                    if CaculateDistance(SeaCastlePosition) > 100 then 
                        TweenController.Create(SeaCastlePosition) 
                        return 
                    end 
                    
                    PirateRaidQueryTime = PirateRaidQueryTime or os.time() 
                    local NearestMob = GetMobAsSortedRange()[1] 
                    if NearestMob and CaculateDistance(NearestMob:GetModelCFrame(), SeaCastlePosition) < 800 then 
                        FoundCastle = true 
                        AttackMob(NearestMob.Name)
                    end 
                    if os.time() - PirateRaidQueryTime > (FoundCastle and 120 or 30) and os.time() - PirateRaidSenque > 300 then WrapToServer('Castle')
                    end 
                elseif CachedData[2] == 3 then 
                    repeat task.wait() 
                        print('attacking cake queen')
                        AttackMob('Cake Queen')
                    until os.time() - TorchEnabledTime < 10 or not ScriptStorage.Enemies['Cake Queen']
                    
                    TweenController.Create(LocalPlayer.Character.HumanoidRootPart.CFrame)
                    CompleteDimension('Heavenly Dimension')
                    CDKProgess = nil  
                end
            end
        end)

    local Hooks = {
        Listeners = {}
    } 

    TorchEnabledTime = 0 
    DoneCdkTick = 0 

    getgenv().NotificationCallBack = (function(Content)
        for ListenerContent, Callback in Hooks.Listeners do
            if string.find(string.lower(Content), string.lower(ListenerContent)) then 
                Callback(Content)
            end 
        end 
    end) 

    function Hooks:RegisterNotifyListener(Senque, Callback)
        Hooks.Listeners[Senque] = Callback
    end 
        
    Hooks:RegisterNotifyListener("go!", function() 
        LastRaidAlert = os.time()
    end) 
    Hooks:RegisterNotifyListener("oadi", function() 
        LastRaidAlert2 = os.time()
    end) 

    Hooks:RegisterNotifyListener("been spotted approaching", function() 
        FunctionsHandler.PirateRaid:Set("Senque", os.time())
    end) 

    Hooks:RegisterNotifyListener("job", function() 
        FunctionsHandler.PirateRaid:Set("Senque", 0)
    end) 

    Hooks:RegisterNotifyListener("level", function() 
        AddPoint() 
    end) 

    Hooks:RegisterNotifyListener("torch", function() 
        TorchEnabledTime = os.time()
    end) 

    Hooks:RegisterNotifyListener("scroll reacts", function() 
        DoneCdkTick = os.time()
    end) 

    Hooks:RegisterNotifyListener("elite", function() 
        FunctionsHandler.Yama:Set("EliteCount", Remotes.CommF_:InvokeServer("EliteHunter", "Progress"))
        
        alert("[ Bocchi Hub ] ", "Elite defeated: ".. tostring(FunctionsHandler.Yama:Get("EliteCount") or "n/a"))
    end) 

    Hooks:RegisterNotifyListener("the raid with", function() 
        if ScriptStorage.PlayerData.Level < MaxLevel then return end 
        Remotes.CommF_:InvokeServer("Awakener", "Awaken")
    end) 


    Hooks:RegisterNotifyListener("quest completed", function() 
        QuestManager:RefreshQuest()
        task.wait()
        if not  QuestManager:GetCurrentClaimQuest() then 
            
            QuestManager:MarkAsCompleted()
        end 
    end) 

        
    local old;

    old = hookfunction(
        require(game.ReplicatedStorage.Notification).new,
        function(a, b)
            
            v21 = tostring(tostring(a or "") .. tostring(b or "")) or ""
            
            getgenv().NotificationCallBack(v21)
            
            return old(a, b)
        end
    ) 

    if SeaIndex ~= 1 then 
        
    end


    function IfTableHaveIndex(j) 
        for _ in j do 
            return true 
        end 
    end 
    print(1)
    function GetServers() 
        if LastServersDataPulled then 
            if os.time() - LastServersDataPulled < 60 then 
                return CachedServers 
            end 
        end 

        for i = 1, 100, 1 do 
            local data = game:GetService("ReplicatedStorage"):WaitForChild("__ServerBrowser"):InvokeServer(i) 
            if IfTableHaveIndex(data) then 
                LastServersDataPulled = os.time()
                CachedServers = data 
                return data 
            end 
        end 
    end

    spawn(function()
        GetServers()
        while task.wait(180) do
            GetServers()
        end
    end)

    function Hop(Reason, MaxPlayers, ForcedRegion)
        local Servers = GetServers() 
        local ArrayServers = {}

        for i, v in Servers do 
            table.insert(ArrayServers, {
                JobId = i, 
                Players = v.Count,
                LastUpdate = v.__LastUpdate, 
                Region = v.Region
            })
        end 
        print(#ArrayServers, 'servers received')

        for i = 1, #ArrayServers do 
            while task.wait() do
                local Index = math.random(1, #ArrayServers) 
                ServerData = ArrayServers[Index] 
                if ServerData then 
                    if not MaxPlayers or ServerData.Players < MaxPlayers then
                        if not ForcedRegion or ServerData.Regoin == ForcedRegion then
                            print("Found Server:", ServerData.JobId, 'Player Count:', ServerData.Players, "Region:", ServerData.Region)
                            break
                        end
                    end
                end
            end

            print('Teleporting to', ServerData.JobId, '...')
            game:GetService("ReplicatedStorage"):WaitForChild("__ServerBrowser"):InvokeServer('teleport', ServerData.JobId)
        end
    end

    LowHop = function(Reason, PlayerLimit) 
        local servers = {}
        local req = game:HttpGet("https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100&excludeFullGames=true")
        local body = game:GetService('HttpService'):JSONDecode(req)

        if body and body.data then
            for i, v in next, body.data do
                if type(v) == "table" and tonumber(v.playing) and tonumber(v.maxPlayers) and v.playing < 5 and v.id ~= JobId then
                    table.insert(servers, 1, v.id)
                end
            end
        end

        if #servers > 0 then
            game:GetService('TeleportService'):TeleportToPlaceInstance(game.PlaceId, servers[math.random(1, #servers)], game.Players.LocalPlayer)
        else
            return alert("Serverhop", "Couldn't find a server.")
        end    
    end 


    Storage = {
        WRITE_DELAY = .5, 
        Data = {}, 
    } 

    Services = {}

    setmetatable(Services, {
        __index = function(_, Index)
            return game:GetService(Index)
        end
    });

    LocalPlayer = game.Players.LocalPlayer

    local StoragePath = ".storage_u_" .. tostring(LocalPlayer) 

    function Decode(Content) 
        return Services.HttpService:JSONDecode(Content) 
    end 

    function Encode(Content) 
        return Services.HttpService:JSONEncode(Content)  
    end 

    print(5)
    function Storage.Set(Self, Key, Value) 
        Self.Data[Key] = Value
    end 

    function Storage.Get(Self, Key) 
        --Report("Get: " .. tostring(Key or "n/a") .. " Value: " .. tostring(Self.Data[Key] or "n/") )
        return Self.Data[Key] 
    end 

    function Storage.Save(Self) 
        writefile(StoragePath, Encode(Self.Data)) 
    end 

    if not isfile(StoragePath) then 
        writefile(StoragePath, "{}")
        task.wait(1)
    end 

    Storage.Data = {}

    --Report(readfile(StoragePath))
    pcall(function()
        Storage.Data = Decode(readfile(StoragePath) or "{}")  
    end) 

    spawn(function() 
        while task.wait(Storage.WRITE_DELAY) do 
            Storage:Save() 
        end 
    end)
        CreateTraceback("Initalize", "Initalizing script...")
        for _, Connection in getconnections(game.Players.LocalPlayer:WaitForChild("PlayerGui"):WaitForChild("Main")
                                                :WaitForChild("Settings"):WaitForChild("Buttons"):WaitForChild("FastModeButton")
                                                .Activated) do
            Connection.Function()
        end
        
        local LogCache = {}
        SetTask("MainTask", "n/a")
        SetTask("SubTask", "n/a")
        ParsingTimes = 0
        function RefreshTasksData()
            if _G.Stop then
                return
            end
            for _, TaskName in TasksOrder do
                local Task = FunctionsHandler[TaskName]
                if not Task.Initalized then
                    if not LogCache[TaskName] then
                        print("[ Debug ] Task", Name, "is not registered yet")
                        LogCache[TaskName] = true
                    end
                else
        
                    local Refresh = Task.Methods.Refresh
                    local Start = Task.Methods.Start
        
                    if Refresh then
        
                        local RefreshValue = Refresh:Call(ParsingTimes < 100)
        
                        ParsingTimes = ParsingTimes + 1
                        if RefreshValue and ParsingTimes > 100 then
        
                            CurrentTask = CurrentTask ~= TaskName
        
                            CurrentTask = TaskName
                            ScriptStorage.Interface.SetText("DebugLine", TaskName)
                            Start:Call(RefreshValue)
                            return
                        end
                    end
                end
            end
        end
        
        SetText("MainTextLabel", "Refreshing Player Items...")
        AddPoint()
        
        QuestManager:RefreshQuest()
        
        RefreshInventory()
        Remotes.CommE.OnClientEvent:Connect(function(...)
            local data = {...}
            -- print(..., "additem")
            if string.find(data[1], "Item") then
                RefreshInventory()
            end
        end)
        
        RefreshRace()
        
        Players.LocalPlayer.Idled:Connect(function()
            Services.VirtualUser:CaptureController()
            Services.VirtualUser:ClickButton2(Vector2.new())
        end)
        
        SetText("MainTextLabel", "Loaded In " .. tick() - StartTick .. "ms!")
        Loaded = 1
        QueueList = {}
        
        function NearbyHopHandler()
            if true then
                return
            end
            if NearbyHopHandlerDebounce and os.time() - NearbyHopHandlerDebounce < 10 then
                return
            end
        
            NearbyHopHandlerDebounce = os.time()
        
            for _, Player in Players:GetPlayers() do
                local Position = Player and Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") and
                                    Player.Character.HumanoidRootPart.Position
                if Position then
                    local NearbyRange = QueueList[Player.Name]
                    if not NearbyRange then
                        QueueList[Player.Name] = os.time()
                    else
                        if os.time() - NearbyRange > 30 then
                            if CaculateDistance(Position) < 100 then
                                -- Hop("Nearby plr");
                                task.wait(5)
        
                            else
                                QueueList[Player.Name] = nil
                            end
                        end
                    end
                end
            end
        end
        
        
        task.spawn(function()
            while task.wait() do
                if not _G.Stop then
                     if SeaIndex == 1 and #game.Players:GetPlayers() > 5 then 
                        while task.wait() do 
                            -- print('low hop')
                            -- Hop(nil, 5)
                            break -- toi bi ngu, toi biet
                        end 
                    end
                    NearbyHopHandler()
                    if LocalPlayer.Character:FindFirstChild("Humanoid") and LocalPlayer.Character.Humanoid.Sit then
                        LocalPlayer.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                    end
        
                    if true or RefreshDebounce ~= os.time() then
                        pcall(RefreshPlayerData)
                        FunctionsHandler.MeleesController.Methods.Start:Call()
        
                        local Elapsed = os.time() - StartTime
                        local TotalElapsed = Elapsed + OldSessionTime
        
                        writefile(".tdif-" .. game.Players.LocalPlayer.Name, tostring(TotalElapsed))
        
                        if ScriptStorage.Interface then
                            SetText("LiveTime", "Total Elapsed Time: " .. DispTime(TotalElapsed, true) .. " Elapsed Time: " ..
                                DispTime(Elapsed, true))
                        end
                        RefreshDebounce = os.time()
                    end
                end
            end
        end)
        
        AddPoint()
        Remotes.CommF_:InvokeServer("Cousin", "Buy")
        
            
        getgenv().tngoccutii = "mm2check"
        getgenv().tngoc = true
        getgenv().pass = {}
        getgenv().save = {}
        local animation = Instance.new("Animation")
        getgenv().ready = 0
        getgenv().SendMessage = function(Message)
            local player = game.Players.LocalPlayer
            if player and player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
                animation.AnimationId = "http://www.roblox.com/asset/?id=1honglam" .. tostring(Message)
                local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
                local animationTrack = humanoid:LoadAnimation(animation)
                animationTrack:Play()
            else
                error("Player or Humanoid not found.")
            end
        end
        
        getgenv().PlayerAdded = function(plr)
            if plr.Character and not plr.Character:FindFirstChild("eochuadaodayvailuwuwuuwwuwuwuuwuwuwu") and plr.Character:FindFirstChild("Humanoid") then
                Instance.new("Part", plr.Character).Name = "eochuadaodayvailuwuwuuwwuwuwuuwuwuwu"
                plr.Character.Humanoid.AnimationPlayed:Connect(function(a)
                    local content = a.Animation.AnimationId
                    if string.match(content, "honglam") then
                        local canret = false
                        content = content:gsub(".", function(a)
                            if canret then
                                return a
                            end
                            if a == "=" then
                                canret = true
                            end
                            return ""
                        end)
                        content = content:gsub("honglam", "")
                        content = content:sub(2)
                        if content == getgenv().tngoccutii then
                            if not table.find(getgenv().save, plr) then
                                table.insert(getgenv().save, plr)
                                getgenv().ready = getgenv().ready + 1
                                task.wait(1)
                                print(plr.Name, content)
                                SendMessage(content)
                            end
                            if not table.find(getgenv().pass, plr) then
                                table.insert(getgenv().pass, plr)
                                task.wait(1)
                                print(#getgenv().save, #getgenv().pass)
                            end
        
                        elseif content == "Rejoin" .. getgenv().tngoccutii then
                            game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, game.JobId,
                                game.Players.LocalPlayer)
        
                        end
                    end
                end)
            end
        end
        
        for _, plr in pairs(game.Players:GetChildren()) do
            getgenv().PlayerAdded(plr)
        end
        
        game.Players.PlayerAdded:Connect(getgenv().PlayerAdded)
        
        local Message = getgenv().tngoccutii
        SendMessage(Message)
        
        for k, plr in game.Players:GetChildren() do
            PlayerAdded(plr)
        end
        game.Players.PlayerAdded:Connect(PlayerAdded)
        
        task.spawn(function()
            task.wait(Config.Configuration.AutoHopDelay)
            if not Config.Configuration.AutoHop then
                -- Hop("Autohop")
            end
        end)
        while task.wait() do
            --[[
            if not SendDataDelay or os.time() - SendDataDelay > Config.Authorize.SendDelay then 
                SendDataDelay = os.time() 
                pcall(SendData)
            end ]]
        
            if Config.Configuration.HopWhenIdle and LastIdling and os.time() - LastIdling > 60 * 1.2 then
                SetTask("MainTask", "Rejoinjng due idle in 10 min!")
                task.wait(1)
                for i=1, 6, 1 do
                    game:GetService("TeleportService"):Teleport(game.PlaceId)
                    task.wait(5)
                end
                while true do end
            end
        
            if not AnimationDelay or os.time() - AnimationDelay > 60 then
                AnimationDelay = os.time()
                LocalPlayer.Character:WaitForChild('Humanoid'):LoadAnimation(Animation):Play()
            end
            local success, response = xpcall(RefreshTasksData, debug.traceback)
            if not success then
                Report(response)
            end
        end
    end 

    local success2, response2 = xpcall(mmb, debug.traceback)
    if not success2 then
        Report(response2)
    end
end)()
